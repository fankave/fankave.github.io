{"version":3,"sources":["PostController.js","SmartStadiumController.js","SocialDirectives.js","ReplyService.js","SocialService.js"],"names":["angular","module","controller","$scope","$sce","$timeout","$window","$location","$sanitize","$routeParams","networkService","ReplyService","TopicService","CommentService","UserInfoService","URIHelper","SplashService","MUService","FileUploader","ForumStorage","UserAgentService","checkDirectReply","console","log","directComment","$","focus","updateScore","leftTeam","getTeamA","rightTeam","getTeamB","score","getScore","undefined","leftTeamScore","points","rightTeamScore","gameStatus","getGameStatus","topicTitle","getTitle","gamePeriod","getGamePeriod","gameClock","getGameClock","updateCommentInReply","selectedComment","postID","getPostId","getCommentById","NETWORK_DEBUG","tempComment","postAuthorName","author","name","postAuthorPhoto","photo","postTimestamp","createdAt","likeCount","metrics","likes","replyCount","replies","mediaAspectFeed","isLiked","signal","like","topicId","isMyComment","isCurrentUser","id","type","mediaUrl","mediaAspectFull","mediaAspectRatio","mediaOrientation","mediaThumbUrl","shared","embed","embedCreatedAt","embedCreatedAtFull","embedType","embedMedia","providerName","embedLogo","provider","logo","playable","embedHtml","comment","document","ready","updateReplies","repliesData","len","length","i","tempReply","isMyReply","trustAsHtml","push","justReplied","setTimeout","window","scrollTo","body","scrollHeight","isMobileUser","mobileBrowser","mobileUserAgent","getMobileUserAgent","getFromLocalStorage","initPage","pageClass","getTopicId","setPostId","backToTopicButtonTapped","HTML5_LOC","path","location","setPeelUI","userType","css","isPeelUser","hidePeelSplash","isSmartStadiumUser","isMI16User","requestReplies","send","getRepliesRequest","getCommentByIdRequest","peelClose","peelWatchOnTV","ga","showId","getPeelShowId","showNewRepliesIndicator","newRepliesIndicatorTapped","triggerRepliesKeyboard","secureLink","url","isGuestUser","initReplyPage","paddingTop","height","getElementById","style","paddingBottom","$watch","newValue","oldValue","replyDivs","getElementsByClassName","div","thisReply","thisDiv","onclick","e","target","is","this","setToLocalStorage","each","magnificPopup","isUserLoggedIn","isSocketConnected","init","updateLikeComment","isCommentLiked","getUnlikeCommentRequest","getLikeCommentRequest","updateLikeReply","isReplyLiked","unlikeReplyRequest","likeReplyRequest","deleteReply","deleteReplyRequest","reportReplyAsSpam","flagReplyRequest","deleteComment","deleteCommentRequest","reload","reportCommentAsSpam","flagCommentRequest","imageClick","imageURL","event","cancelBubble","stopPropagation","open","items","src","callbacks","bind","preventDefault","close","unbind","notifyNewReplies","registerObserverCallback","trustSrc","trustAsResourceUrl","addEventListener","xLinkActivated","_this","viewScreen","ssActiveScreen","viewHighlights","viewRoster","viewStats","viewProfileStats","exitView","directive","restrict","scope","thisPost","trustSource","shareSubmit","exitShare","highlight","unhighlight","templateUrl","factory","DateUtilityService","Bant","FDSUtility","setReplies","replyData","_replies","tempReplyData","data","results","_replyObject","bant","_topicIdFromReply","notifyObservers","appendToReplies","postReplyData","tempPostedReply","commentId","_currentCommentId","updateReply","replyObj","updateLocalData","newData","updateLikeReplyWithId","liked","tempObject","getReplyById","updateBantLiked","removeReply","splice","getCommentIdByReply","replyGetRequest","uri","varReplyParams","rid","timestamp","Date","getTime","method","encodeURI","replyPostRequest","varPostParams","LIST_REPLIES_URI","getPostReplyRequest","replyId","isReplyToReply","targetType","targetId","createReplyParams","POST_REPLY_URI","lang","content","sections","html","LIKE_REPLY_URI","UNLIKE_REPLY_URI","FLAG_REPLY_URI","DELETE_REPLY_URI","callback","callbackLength","observerCallbacks","pop","isLikedById","updateReplyLocalData","deleteById","flagById","UNFLAG_REPLY_URI","HIDE_REPLY_URI","hideById","UNHIDE_REPLY_URI","_postID","forEach","getTopicIdFromReply","postId","setSocialData","socialData","_socialArray","tempData","_socialObject","_offset","nextOffset","getSocialDataRequest","offset","reqOffset","request","LIST_SOCIAL_URI","LIMIT","socialArray","resetSocialOffset"],"mappings":"AAAAA,QAAAC,OAAA,cAAA,gBAAA,eAAA,cAAA,sBACAC,WAAA,kBAAA,SAAA,OAAA,WAAA,UAAA,YAAA,YAAA,eAAA,iBAAA,eAAA,eAAA,iBAAA,kBAAA,YAAA,gBAAA,YAAA,eAAA,eAAA,mBAEA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAgHA,QAAAC,KACAC,QAAAC,IAAA,iBAAAX,EAAAY,eACAZ,EAAAY,gBACAF,QAAAC,IAAA,sBAAAE,EAAA,sBACAA,EAAA,qBAAAC,QACAd,EAAAY,eAAA,GA4JA,QAAAG,KAEAxB,EAAAyB,SAAAhB,EAAAiB,WACA1B,EAAA2B,UAAAlB,EAAAmB,UACA,IAAAC,GAAApB,EAAAqB,UACAC,SAAAF,IACA7B,EAAAgC,cAAAH,EAAAI,OAAA,GACAjC,EAAAkC,eAAAL,EAAAI,OAAA,IAEAjC,EAAAmC,WAAA1B,EAAA2B,gBACApC,EAAAqC,WAAA5B,EAAA6B,WACA,QAAAtC,EAAAmC,aACAnC,EAAAuC,WAAA9B,EAAA+B,gBACAxC,EAAAyC,UAAAhC,EAAAiC,gBAEAvB,QAAAC,IAAA,6BAGA,QAAAuB,GAAAC,GASA,GARAzB,QAAAC,IAAA,uBAAApB,EAAA6C,QACA7C,EAAA6C,SACA7C,EAAA6C,OAAArC,EAAAsC,YACA3B,QAAAC,IAAA,uBAAApB,EAAA6C,SAEAd,QAAAa,IACAA,EAAAlC,EAAAqC,eAAA/C,EAAA6C,SAEAd,QAAAa,EAAA,CACAI,eAAA7B,QAAAC,IAAA,qCACA,IAAA6B,KACAA,GAAAL,EACAK,EAAAC,eAAAN,EAAAO,OAAAC,KACAH,EAAAI,gBAAAT,EAAAO,OAAAG,MAEAL,EAAAM,cAAAX,EAAAY,UACAP,EAAAQ,UAAAb,EAAAc,QAAAC,MACAV,EAAAW,WAAAhB,EAAAc,QAAAG,QACAZ,EAAAa,gBAAAlB,EAAAkB,gBACAb,EAAAc,QAAAnB,EAAAoB,OAAAC,KACAhB,EAAAiB,QAAAtB,EAAAsB,QACAjB,EAAAkB,YAAAxD,EAAAyD,cAAAxB,EAAAO,OAAAkB,IAEA,UAAApB,EAAAqB,OACArB,EAAAsB,SAAA3B,EAAA2B,SAEAtB,EAAAa,gBAAAlB,EAAAkB,gBACAb,EAAAuB,gBAAA5B,EAAA4B,gBACAvB,EAAAwB,iBAAA7B,EAAA6B,iBACAxB,EAAAyB,iBAAA9B,EAAA8B,iBACAzB,EAAA0B,cAAA/B,EAAA+B,eAGA,UAAA1B,EAAAqB,OACArB,EAAA2B,QAAA,EACA3B,EAAA4B,MAAAjC,EAAAiC,MACA5B,EAAA4B,MAAAC,eAAAlC,EAAAkC,eACA7B,EAAA4B,MAAAE,mBAAAnC,EAAAmC,mBAEA,UAAA9B,EAAA+B,YACA/B,EAAAsB,SAAA3B,EAAAqC,WAAAV,SACAtB,EAAA0B,cAAA/B,EAAAqC,WAAAN,cACA1B,EAAAa,gBAAAlB,EAAAqC,WAAAnB,gBACAb,EAAAuB,gBAAA5B,EAAAqC,WAAAT,gBACAvB,EAAAwB,iBAAA7B,EAAAqC,WAAAR,iBACAxB,EAAAyB,iBAAA9B,EAAAqC,WAAAP,kBAGA,YAAAzB,EAAAiC,aACAjC,EAAA4B,MAAAM,UAAA,yBAEAlC,EAAA4B,MAAAM,UAAAvC,EAAAiC,MAAAO,SAAAC,KAGA,SAAAzC,EAAAiC,MAAAP,MAAA1B,EAAAiC,MAAAS,YAAA,IACArC,EAAAsC,UAAA3C,EAAA2C,YAIAvF,EAAAwF,QAAAvC,EAOA3B,EAAAmE,UAAAC,MAAA,WACAxE,MAIA,QAAAyE,KAEA,GAAAC,GAAApF,EAAAqD,UACAgC,EAAAD,EAAAE,MAIA,KAFA9F,EAAA6D,WAEAkC,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACA,GAAAC,KACAA,GAAAJ,EAAAG,GACAC,EAAA9C,eAAA0C,EAAAG,GAAA5C,OAAAC,KACA4C,EAAA3C,gBAAAuC,EAAAG,GAAA5C,OAAAG,MACA0C,EAAAC,UAAAtF,EAAAyD,cAAAwB,EAAAG,GAAA5C,OAAAkB,IAEA2B,EAAAzC,cAAAqC,EAAAG,GAAAvC,UACAwC,EAAAvC,UAAAmC,EAAAG,GAAArC,QAAAC,MACAqC,EAAApC,WAAAgC,EAAAG,GAAArC,QAAAG,QACAmC,EAAAlC,gBAAA8B,EAAAG,GAAAjC,gBACAkC,EAAAjC,QAAA6B,EAAAG,GAAA/B,OAAAC,KAEA,UAAA+B,EAAA1B,OACA0B,EAAAzB,SAAAqB,EAAAG,GAAAxB,SAEAyB,EAAAlC,gBAAA8B,EAAAG,GAAAjC,gBACAkC,EAAAxB,gBAAAoB,EAAAG,GAAAvB,gBACAwB,EAAAvB,iBAAAmB,EAAAG,GAAAtB,iBACAuB,EAAAtB,iBAAAkB,EAAAG,GAAArB,iBACAsB,EAAArB,cAAAiB,EAAAG,GAAApB,eAEA,UAAAqB,EAAA1B,OACA0B,EAAApB,QAAA,EACAoB,EAAAnB,MAAAe,EAAAG,GAAAlB,MACAmB,EAAAnB,MAAAC,eAAAc,EAAAG,GAAAjB,eACAkB,EAAAnB,MAAAE,mBAAAa,EAAAG,GAAAhB,mBAEA,YAAAiB,EAAAd,aACAc,EAAAnB,MAAAM,UAAA,yBAEAa,EAAAnB,MAAAM,UAAAS,EAAAG,GAAAlB,MAAAO,SAAAC,KAGA,SAAAO,EAAAG,GAAAlB,MAAAP,MAAAsB,EAAAG,GAAAlB,MAAAS,YAAA,IACAU,EAAAnB,MAAAU,UAAAtF,EAAAiG,YAAAN,EAAAG,GAAAR,aAIAvF,EAAA6D,QAAAsC,KAAAH,GAMA,SAAAhG,EAAA6D,QAAAkC,GAAAzB,KAcA,GAAAtE,EAAAoG,aAEAC,WAAA,WAEAlF,QAAAC,IAAA,wBACAkF,OAAAC,SAAA,EAAAd,SAAAe,KAAAC,cACAzG,EAAAoG,aAAA,GACA,KAhbAnF,EAAAyF,gBACA1G,EAAA2G,eAAA,EACA3G,EAAA4G,gBAAA3F,EAAA4F,qBACA1F,QAAAC,IAAA,sBAAApB,EAAA4G,kBAEA5G,EAAA2G,eAAA,EAIA3F,EAAA8F,oBAAA,qBAAA,IACA3F,QAAAC,IAAA,iCACApB,EAAA+G,WAKA/G,GAAAgH,UAAA,YAEAhH,EAAA6C,OAAAvC,EAAAuC,OACA7C,EAAAkE,QAAAzD,EAAAwG,aAEAjH,EAAAoG,aAAA,EAEA5F,EAAA0G,UAAA5G,EAAAuC,QAEA7C,EAAAmH,wBAAA,WAEA,GAAAjD,GAAAzD,EAAAwG,YACAlF,SAAAmC,IACAA,EAAAlE,EAAAwF,QAAAtB,SACAkD,UACAhH,EAAAiH,KAAA,UAAAnD,GAEA/D,EAAAmH,SAAA,WAAApD,GAIAlE,EAAAuH,UAAA,SAAAC,GACArG,QAAAC,IAAA,mBAAAoG,GACA,SAAAA,EACAlG,EAAA,gBAAAmG,IAAA,cAAA,QACA,UAAAD,EACAlG,EAAA,gBAAAmG,IAAA,cAAA,QACA,SAAAD,GAGAlG,EAAA,gBAAAmG,IAAA,cAAA,QAIA9G,EAAA+G,cACA1H,EAAA0H,YAAA,EACA7G,EAAA8G,gBAAA,EACA3H,EAAAuH,UAAA,SAEA5G,EAAAiH,sBACA5H,EAAA4H,oBAAA,EACA5H,EAAAuH,UAAA,UAEA5G,EAAAkH,eACA7H,EAAA6H,YAAA,GAGA7H,EAAA8H,eAAA,WAEAvH,EAAAwH,KAAAvH,EAAAwH,kBAAAhI,EAAA6C,QACA,IAAAD,GAAAlC,EAAAqC,eAAA/C,EAAA6C,OACAd,SAAAa,EACAD,EAAAC,IAGAzB,QAAAC,IAAA,gEACAb,EAAAwH,KAAArH,EAAAuH,sBAAAjI,EAAA6C,WAIA7C,EAAAkI,UAAA,WAEA/G,QAAAC,IAAA,gBAGApB,EAAAmI,cAAA,WAEAC,GAAA,OAAA,QAAA,OAAA,QAAA,iBACAjH,QAAAC,IAAA,kBACA,IAAAiH,GAAAzH,EAAA0H,eACAvG,SAAAsG,EACA/B,OAAAgB,SAAA,iBAAAe,EAEA/B,OAAAgB,SAAA,eAGAtH,EAAAuI,yBAAA,EACAvI,EAAAwI,0BAAA,WAEArH,QAAAC,IAAA,6BACApB,EAAAuI,yBAAA,EACA5C,IACAW,OAAAC,SAAA,EAAAd,SAAAe,KAAAC,eAmBAzG,EAAAyI,uBAAA,WACAnH,EAAA,qBAAAC,SAGAvB,EAAA0I,WAAA,SAAAC,EAAAtE,GACA,MAAA1D,GAAAiI,cACA,GAEAD,EAAAtE,GAIArE,EAAA6I,cAAA,WACA7I,EAAAgH,UAAA,YACAhH,EAAA8I,WAAA,KAGA9I,EAAA8H,gBAEAxG,GAAA,cAAAyH,QAKA/I,GAAA2G,iBAAA,IACAlB,SAAAuD,eAAA,eAAAC,MAAAC,cAAA,QAGAlJ,EAAAmJ,OAAA,UAAA,SAAAC,EAAAC,GAEAnJ,EAAA,WAGA,GAAAoJ,GAAA7D,SAAA8D,uBAAA,UACA,KAAAC,MAAAF,GACA,GAAAvH,QAAAqH,EAAA,CACA,GAAAK,GAAAL,EAAAI,IACA,IAAAzH,QAAA0H,EAAA,CACA,GAAAC,GAAAJ,EAAAE,IACAE,GAAAC,QAAA,SAAAC,GACA,MAAAtI,GAAAsI,EAAAC,QAAAC,GAAA,MACA3I,QAAAC,IAAA,kBAAAwI,EAAAG,KAAA1F,QACArD,GAAAgJ,kBAAA,gBAAAD,KAAA1F,KAFA,SASA/C,EAAA,sBAAA2I,KAAA,WAEA3I,EAAA,eAAA4I,eACA5F,KAAA,iBAOA3D,EAAAwJ,kBACA5J,EAAA6J,qBACA7J,EAAA8J,OACArK,EAAA6I,iBAGAzB,UACAhH,EAAAiH,KAAA,UAEAlH,EAAAmH,SAAA,UAIAtH,EAAAsK,kBAAA,SAAAjG,GAEA3D,EAAA6J,eAAAlG,GACA9D,EAAAwH,KAAArH,EAAA8J,wBAAAnG,IAGA9D,EAAAwH,KAAArH,EAAA+J,sBAAApG,KAIArE,EAAA0K,gBAAA,SAAArG,GAEA7D,EAAAmK,aAAAtG,GACA9D,EAAAwH,KAAAvH,EAAAoK,mBAAAvG,IAGA9D,EAAAwH,KAAAvH,EAAAqK,iBAAAxG,KAIArE,EAAA8K,YAAA,SAAAzG,GAEAlD,QAAAC,IAAA,eAAAiD,EAAA,KACA9D,EAAAwH,KAAAvH,EAAAuK,mBAAA1G,KAGArE,EAAAgL,kBAAA,SAAA3G,GAEAlD,QAAAC,IAAA,qBAAAiD,EAAA,KACA9D,EAAAwH,KAAAvH,EAAAyK,iBAAA5G,KAGArE,EAAAkL,cAAA,SAAA7G,GAEAlD,QAAAC,IAAA,iBAAAiD,EAAA,KAEA9D,EAAAwH,KAAArH,EAAAyK,qBAAA9G,IACA+C,UACAhH,EAAAiH,KAAA,UAAArH,EAAAkE,SAEA/D,EAAAmH,SAAA,WAAAtH,EAAAkE,QAEA/D,EAAAmH,SAAA8D,UAGApL,EAAAqL,oBAAA,SAAAhH,GAEAlD,QAAAC,IAAA,uBAAAiD,EAAA,KAEA9D,EAAAwH,KAAArH,EAAA4K,mBAAAjH,KAGArE,EAAAuL,WAAA,SAAAC,GAEAC,MAAAC,cAAA,EACAD,MAAAE,iBAAAF,MAAAE,kBAEArK,EAAA4I,cAAA0B,MACAC,OACAvH,KAAA,QACAwH,IAAAN,GAEAlH,KAAA,SACAyH,WAEAH,KAAA,WAEAzK,QAAAC,IAAA,gBACAE,EAAA,QAAA0K,KAAA,YAAA,SAAApC,GAAAA,EAAAqC,oBAEAC,MAAA,WAEA/K,QAAAC,IAAA,gBACAE,EAAA,QAAA6K,OAAA,iBA8KA,IAAAC,GAAA,WAEA,GAAArK,QAAA/B,EAAA6D,QAEA8B,QAEA,CACA,GAAAC,GAAApF,EAAAqD,UACAgC,EAAAD,EAAAE,MACA9F,GAAA6D,QAAAiC,OAAAD,EAEAlF,EAAAyD,cAAAwB,EAAAC,EAAA,GAAA1C,OAAAkB,IAIAsB,IAHA3F,EAAAuI,yBAAA,EAOA5C,KAMAnF,GAAA6L,yBAAAD,GACA3L,EAAA4L,yBAAA7K,GACAd,EAAA2L,yBAAA1J,GAEA3C,EAAAsM,SAAA,SAAAR,GAEA,MAAA7L,GAAAsM,mBAAAT,IAGA3L,EAAAqM,iBAAA,eAAA,WACArL,QAAAC,IAAA,iBACAJ,EAAAgJ,kBAAA,kBAAA,KAGAhK,EAAAyM,gBAAA,KCleA5M,QAAAC,OAAA,yBACAC,WAAA,0BAAA,SAAA,SAAAC,GAEA,GAAA0M,GAAA3C,IACAA,MAAA4C,YAAA,EACA5C,KAAA6C,eAEA7C,KAAA8C,eAAA,WACAH,EAAAE,eAAA,aACAF,EAAAC,YAAA,GAGA5C,KAAA+C,WAAA,WACAJ,EAAAE,eAAA,SACAF,EAAAC,YAAA,GAGA5C,KAAAgD,UAAA,WACAL,EAAAE,eAAA,QACAF,EAAAC,YAAA,GAGA5C,KAAAiD,iBAAA,WACAN,EAAAE,eAAA,eACAF,EAAAC,YAAA,GAGA5C,KAAAkD,SAAA,WACAP,EAAAC,YAAA,MC5BA9M,QAAAC,OAAA,gBACAoN,UAAA,oBAAA,WACA,OACAC,SAAA,IACAC,OACAC,SAAA,IACAC,YAAA,IACAC,YAAA,IACAC,UAAA,IACAC,UAAA,IACAC,YAAA,KAEAC,YAAA,gCCZA9N,QAAAC,OAAA,iBACA8N,QAAA,gBAAA,qBAAA,OAAA,aACA,SAAAC,EAAAC,EAAAC,GAsBA,QAAAC,GAAAC,GAGA,GAFAC,KACAC,cAAAF,EAAAG,KAAAC,QACAtM,QAAAoM,eAAAA,cAAArI,OAAA,EAAA,CACA,GAAAD,GAAAsI,cAAArI,MAEA,KAAAC,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACA,GAAAuI,KACAA,GAAAR,EAAAS,KAAAJ,cAAApI,IACAhE,QAAAuM,EAAAjK,IACA6J,EAAA/H,KAAAmI,GAEAE,EAAAL,cAAApI,GAAA7B,QAEAuK,KAIA,QAAAC,GAAAC,GACA,GAAAC,GAAAD,EAAAP,IACA,IAAArM,QAAA6M,IACAzN,QAAAC,IAAA,oBAAAwN,GACAzN,QAAAC,IAAA,qBAAAwN,EAAAC,WACA1N,QAAAC,IAAA,uBAAA0N,GACAF,EAAAC,WAAAC,GAAA,CACA,GAAAR,GAAAR,EAAAS,KAAAK,EACA7M,SAAAuM,EAAAjK,IACA6J,EAAA/H,KAAAmI,GACAG,KAKA,QAAAM,GAAAd,GAGA,GAAAe,GAAAf,EAAAG,IACA,KAAArI,EAAA,EAAAA,EAAAmI,EAAApI,OAAAC,IACA,GAAAmI,EAAAnI,GAAA1B,IAAA2K,EAAA3K,GAIA,MAFA6J,GAAAnI,GAAA+H,EAAAS,KAAAS,GACA7N,QAAAC,IAAA,iBACA,CAKA,OAFAsN,GAAAT,GAEA,EAGA,QAAAgB,GAAAC,GACA,IAAAnJ,EAAA,EAAAA,EAAAmI,EAAApI,OAAAC,IACA,GAAAmI,EAAAnI,GAAA1B,IAAA6K,EAAA7K,GAKA,MAHA6J,GAAAnI,GAAAmJ,OACAlM,eACA7B,QAAAC,IAAA,uBAAA8M,EAAAnI,GAAA1B,KAMA,QAAA8K,GAAA9K,EAAA+K,GAGA,GAFApM,eACA7B,QAAAC,IAAA,0BAAAiD,EAAA,YAAA+K,GACArN,QAAAsC,EAAA,CACA,GAAAgL,EACAA,GAAAC,EAAAjL,GACAgL,EAAAvB,EAAAyB,gBAAAF,EAAAD,GACAH,EAAAI,GAEAZ,KAKA,QAAAe,GAAAvB,GACA,IAAAlI,EAAA,EAAAA,EAAAmI,EAAApI,OAAAC,IACAmI,EAAAnI,GAAA1B,IAAA4J,EAAA5J,IAEA6J,EAAAuB,OAAA1J,EAAA,GAMA,QAAAuJ,GAAAjL,GAEA,IADArB,eAAA7B,QAAAC,IAAA,aAAA8M,EAAApI,QACAC,EAAA,EAAAA,EAAAmI,EAAApI,OAAAC,IACA,GAAAmI,EAAAnI,GAAA1B,IAAAA,EAEA,MAAA6J,GAAAnI,GAKA,QAAA2J,GAAArL,GAEA,IADArB,eAAA7B,QAAAC,IAAA,aAAA8M,EAAApI,QACAC,EAAA,EAAAA,EAAAmI,EAAApI,OAAAC,IACA,GAAAmI,EAAAnI,GAAA1B,IAAAA,EAEA,MAAA6J,GAAAnI,GAAA8I,UAKA,QAAAc,GAAAC,GACA,MAAAC,iBAAAC,IAAA,QACAC,WAAA,GAAAC,OAAAC,UACAC,OAAA,MACAN,IAAAO,UAAAP,IAIA,QAAAQ,GAAAR,GACA,MAAAS,gBACAP,IAAA,QACAC,WAAA,GAAAC,OAAAC,UACAC,OAAA,OACAN,IAAAO,UAAAP,IAIA,QAAA5H,GAAA6G,GACAC,EAAAD,CACA,IAAAe,GAAAU,EAAAzB,CACA,OAAAc,GAAAC,GAIA,QAAAW,GAAArM,EAAA2K,EAAAZ,EAAAuC,EAAAC,GACA,GAAAC,GAAA,UACAC,EAAA9B,CACA9M,SAAA0O,GAAA,GAAAA,IACAC,EAAA,QACAC,EAAAH,GAEArP,QAAAC,IAAA,aAAA8C,EAAA,eAAA2K,EAAA,eAAAZ,EACA,IAAA2C,GAAAR,EAAAS,EAaA,OAZAD,GAAAxC,MAEA0C,KAAA,KACAC,SAAAC,WAAA1M,KAAA,OAAA2M,KAAAhD,KACApE,QACAvF,KAAAoM,EACArM,GAAAsM,GAGAzM,QAAAA,EACA2K,UAAAA,GAEA+B,EAGA,QAAA/F,GAAAxG,GACA,MAAA+L,GAAAc,EAAA7M,GAGA,QAAAuG,GAAAvG,GACA,MAAA+L,GAAAe,EAAA9M,GAYA,QAAA4G,GAAA5G,GACA,MAAA+L,GAAAgB,EAAA/M,EAAA,gBAOA,QAAA0G,GAAA1G,GACA,MAAA+L,GAAAiB,EAAAhN,GAUA,QAAAgI,GAAAiF,GAIA,IADA,GAAAC,GAAAC,EAAA1L,OACAyL,EAAA,GACAA,EAAAC,EAAA1L,OACA0L,EAAAC,KAEAD,GAAArL,KAAAmL,GAEA,QAAA3G,GAAAtG,GACA,MAAA0J,GAAA2D,YAAAxD,EAAA7J,GAGA,QAAAsN,GAAA/B,EAAAvL,GACA,GAAAuL,GAAAsB,EAAA7M,EACAlD,QAAAC,IAAA,wBACA+N,EAAA9K,GAAA,OAEA,IAAAuL,GAAAuB,EAAA9M,EACA8K,EAAA9K,GAAA,OAEA,CAAA,GAAAuL,GAAAyB,EAAAhN,EAGA,MAFA6J,GAAAH,EAAA6D,WAAA1D,EAAA7J,GACAoK,IACA,CAEAmB,IAAAwB,EAAA/M,EACA6J,EAAAH,EAAA8D,SAAA3D,GAAA,GAEA0B,GAAAkC,EAAAzN,EACA6J,EAAAH,EAAA8D,SAAA3D,GAAA,GAEA0B,GAAAmC,EAAA1N,EACA6J,EAAAH,EAAAiE,SAAA9D,GAAA,GAEA0B,GAAAqC,EAAA5N,IACA6J,EAAAH,EAAAiE,SAAA9D,GAAA,KAxPA,GAAAgE,GAkBA1D,EACAM,EAlBAwB,EAAA,8BACAO,EAAA,qBAGAQ,EAAA,sBAEAH,EAAA,oBACAC,EAAA,sBAEAY,EAAA,oBACAE,EAAA,sBAEAb,EAAA,oBACAU,EAAA,sBAEAN,KACAtD,KA4LAO,EAAA,WACA5O,QAAAsS,QAAAX,EAAA,SAAAF,GACAA,MA8CA,QACAzN,QAAA,WAAA,MAAAqK,IACAkE,oBAAA,WAAA,MAAA5D,IACA1L,UAAA,WAAA,MAAAoP,IACAhL,UAAA,SAAAmL,GAAAH,EAAAG,GACArE,WAAAA,EACAe,YAAAA,EACAL,gBAAAA,EACAS,sBAAAA,EACAwC,qBAAAA,EACAnC,YAAAA,EACAe,oBAAAA,EACA1F,iBAAAA,EACAD,mBAAAA,EACAG,mBAAAA,EACAE,iBAAAA,EACAoB,yBAAAA,EACArE,kBAAAA,EACA2C,aAAAA,EACA+E,oBAAAA,MCnRA7P,QAAAC,OAAA,gBACA8N,QAAA,iBAAA,OACA,SAAAE,GAUA,QAAAwE,GAAAC,GACAC,IACA,IAAAC,GAAAF,EAAAnE,KAAAC,QACAxI,EAAA4M,EAAA3M,MAEA,IAAA2M,GAAA5M,EAAA,EAAA,CACA,IAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACA,GAAA2M,GAAA5E,EAAAS,KAAAkE,EAAA1M,GACA2M,GAAArO,IACAmO,EAAArM,KAAAuM,GAEAC,EAAAJ,EAAAnE,KAAAwE,WACAnE,KAUA,QAAApC,GAAAiF,GAGA,IADA,GAAAC,GAAAC,EAAA1L,OACAyL,EAAA,GACAA,EAAAC,EAAA1L,OACA0L,EAAAC,KAEAD,GAAArL,KAAAmL,GAGA,QAAAuB,GAAAxO,EAAAyO,GACA,GAAAC,GAAAD,GAAAH,EACAK,GACAlD,IAAA,SACAC,WAAA,GAAAC,OAAAC,UACAC,OAAA,MACAN,IAAAO,UAAA8C,EAAA5O,EAAA,UAAA6O,EAAA,WAAAH,GAGA,OADA5R,SAAAC,IAAA,mBAAA4R,GACAA,EAlDA,GAAAC,GAAA,6BAGAzB,KACAgB,KACAG,EAAA,EACAO,EAAA,GAmBAzE,EAAA,WACA5O,QAAAsS,QAAAX,EAAA,SAAAF,GACAA,MA0BA,QACA6B,YAAA,WACA,MAAAX,IAEAY,kBAAA,WACAT,EAAA,GAEAL,cAAAA,EACAO,qBAAAA,EACAxG,yBAAAA","file":"app-post.min.js","sourcesContent":["angular.module(\"PostModule\", [\"NetworkModule\", \"SplashModule\", \"MediaModule\", \"angularFileUpload\"])\n.controller(\"PostController\", [\"$scope\", \"$sce\", \"$timeout\", \"$window\", \"$location\",\"$sanitize\", \"$routeParams\", \"networkService\",\"ReplyService\", \"TopicService\",\"CommentService\", \"UserInfoService\",\"URIHelper\", \"SplashService\", \"MUService\", \"FileUploader\", \"ForumStorage\", \"UserAgentService\",\n\nfunction ($scope, $sce, $timeout, $window, $location, $sanitize, $routeParams, networkService, ReplyService, TopicService, CommentService, UserInfoService,URIHelper,SplashService,MUService,FileUploader,ForumStorage,UserAgentService)\n{\n\n  // Check For Mobile Browser\n  if (UserAgentService.isMobileUser()){\n    $scope.mobileBrowser = true;\n    $scope.mobileUserAgent = UserAgentService.getMobileUserAgent();\n    console.log(\"MOBILE USER AGENT: \", $scope.mobileUserAgent);\n  } else {\n    $scope.mobileBrowser = false;\n  }\n\n  // Retain & Handle State when Returning From External Links\n  if (ForumStorage.getFromLocalStorage('hasUserVisited') === true){\n    console.log(\"Checking For Existing Session\");\n    $scope.initPage();\n  }\n  var headerHeight;\n\n\t//ga('send', 'pageview', \"/comment/\"+$routeParams.postID);\n\t$scope.pageClass = 'page-post';\n\n\t$scope.postID = $routeParams.postID;\n\t$scope.topicId = TopicService.getTopicId();\n\t//$scope.replies = networkService.getRepliesForPostID();\n\t$scope.justReplied = false;\n\t\n\tReplyService.setPostId($routeParams.postID);\n\n\t$scope.backToTopicButtonTapped = function()\n\t{\n\t\tvar topicId = TopicService.getTopicId();\n\t\tif(topicId == undefined)\n\t\t\ttopicId = $scope.comment.topicId;\n    if (HTML5_LOC){\n\t\t  $location.path(\"/topic/\"+topicId);\n    } else {\n      $window.location = \"#/topic/\" + topicId;\n    }\n\t}\n\n\t$scope.setPeelUI = function(userType){\n\t\tconsole.log(\"Post User Type: \", userType);\n\t\tif (userType === 'peel') {\n\t\t\t$('#postSection').css('padding-top','54px');\n\t\t} else if (userType === 'email') {\n      $('#postSection').css('padding-top','54px');\n    } else if (userType === 'MI16') {\n      // $('#postSection').css('padding-top','54px');\n\t\t} else {\n      $('#postSection').css('padding-top','0px');\n    }\n\t}\n\n  if (UserInfoService.isPeelUser()){\n    $scope.isPeelUser = true;\n    SplashService.hidePeelSplash = true;\n    $scope.setPeelUI('peel');\n  }\n  else if (UserInfoService.isSmartStadiumUser()){\n    $scope.isSmartStadiumUser = true;\n    $scope.setPeelUI('email');\n  }\n  else if (UserInfoService.isMI16User()){\n    $scope.isMI16User = true;\n  }\n\n\t$scope.requestReplies = function(){\n\t\t// console.log(\"PostController requestReplies Invoked\");\n\t\tnetworkService.send(ReplyService.getRepliesRequest($scope.postID));\n\t\tvar selectedComment = CommentService.getCommentById($scope.postID);\n\t\tif(selectedComment != undefined){\n\t\t\tupdateCommentInReply(selectedComment);\n\t\t}\n\t\telse{\n\t\t\tconsole.log(\"No data from comment service : TODO handle this with cookies\");\n\t\t\tnetworkService.send(CommentService.getCommentByIdRequest($scope.postID));\n\t\t}\n\t}\n\n\t$scope.peelClose = function()\n\t{\n\t\tconsole.log(\"peelClose()\");\n\t}\n\n\t$scope.peelWatchOnTV = function()\n\t{\n\t\tga('send', 'event', 'Peel', 'click', 'PeelWatchOnTV');\n\t\tconsole.log(\"peelWatchOnTV()\");\n\t\tvar showId = URIHelper.getPeelShowId();\n\t\tif(showId != undefined)\n\t\t\twindow.location = \"peel://tunein/\"+showId;\n\t\telse\n\t\t\twindow.location = \"peel://home\";\n\t}\n\n\t$scope.showNewRepliesIndicator = false;\n\t$scope.newRepliesIndicatorTapped = function()\n\t{\n\t\tconsole.log(\"newRepliesIndicatorTapped\");\n\t\t$scope.showNewRepliesIndicator = false;\n\t\tupdateReplies();\n\t\twindow.scrollTo(0,document.body.scrollHeight);\n\t}\n\n  // $scope.checkDirectReply = function() {\n  //   if (TopicService.directComment){\n  //     $('#postCommentField').focus();\n  //     TopicService.directComment = false;\n  //   }\n  // }\n\n  function checkDirectReply() {\n    console.log(\"Direct Reply? \", TopicService.directComment);\n    if (TopicService.directComment){\n      console.log(\"Triggering Keyboard\", $('#postCommentField'));\n      $('#postCommentField').focus();\n      TopicService.directComment = false;\n    }\n  }\n\n\t$scope.triggerRepliesKeyboard = function() {\n    $('#postCommentField').focus();\n\t}\n\n  $scope.secureLink = function(url, id) {\n    if (UserInfoService.isGuestUser()){\n      return \"\";\n    } else {\n      return url + id;\n    }\n  };\n\t\n\t$scope.initReplyPage = function(){\n\t\t$scope.pageClass = 'page-post';\n\t\t$scope.paddingTop = \"20\";\n\t\t// $scope.pageStyle = {'padding-top': '10em'};\n\n\t\t$scope.requestReplies();\n    // $scope.loadingReply = true;\n\t\tvar replyPostHeader = $(\"#replyPost\").height();\n\t\t// console.log(\"height of repy header: \" + replyPostHeader);\n\t\tvar heightString = replyPostHeader + \"px\";\n\t\t// document.getElementById('postHeader').style.height = '3.5em';//heightString;\n\t\t// document.getElementById('postSection').style.paddingTop = '3.5em';\n\t  if ($scope.mobileBrowser === true){\n      document.getElementById('postSection').style.paddingBottom = \"42px\";\n    }\n\n\t\t$scope.$watch(\"replies\", function (newValue, oldValue)\n\t\t {\n  \t\t\t$timeout(function()\n  \t\t\t{\n  \t\t\t\t// setLinks();\n          var replyDivs = document.getElementsByClassName(\"postRow\");\n          for (div in replyDivs){\n            if (newValue != undefined){\n              var thisReply = newValue[div];\n              if (thisReply != undefined){\n                var thisDiv = replyDivs[div];\n                thisDiv.onclick = function(e) {\n                  if ($(e.target).is('a')){\n                    console.log(\"EXTERNAL LINK: \", e, this.id);\n                    ForumStorage.setToLocalStorage('replyBookmark', this.id);\n                    return;\n                  }\n                }\n              }\n            }\n          }\n    \t\t\t$('#commentsContainer').each(function()\n    \t\t\t{\n      \t\t\t\t$('.image-link').magnificPopup({\n        \t\t\t\ttype:'image'\n     \t\t\t\t});\n    \t\t\t});\n  \t\t\t});\n\t\t});\n\t}\n\n\tif(UserInfoService.isUserLoggedIn()){\n\t\tif(!networkService.isSocketConnected())\n\t\t\tnetworkService.init();\n\t\t$scope.initReplyPage();\n\t}\n\telse {\n\t\tif (HTML5_LOC){\n      $location.path(\"/login\");\n    } else {\n      $window.location = \"#/login\";\n    }\n\t}\n\n\t$scope.updateLikeComment = function(id) {\n\t\t// console.log(\"PostController updateLikeComment(\" + id + \")\");\n\t\tif(CommentService.isCommentLiked(id)){\n\t\t\tnetworkService.send(CommentService.getUnlikeCommentRequest(id));\n\t\t}\n\t\telse{\n\t\t\tnetworkService.send(CommentService.getLikeCommentRequest(id));\t\n\t\t}\n\t};\n\n\t$scope.updateLikeReply = function(id) {\n\t\t// console.log(\"PostController Like Reply\");\n\t\tif(ReplyService.isReplyLiked(id)){\n\t\t\tnetworkService.send(ReplyService.unlikeReplyRequest(id));\n\t\t}\n\t\telse{\n\t\t\tnetworkService.send(ReplyService.likeReplyRequest(id));\n\t\t}\n\t};\n\n\t$scope.deleteReply = function(id)\n\t{\n\t\tconsole.log(\"deleteReply(\" + id + \")\");\n\t\tnetworkService.send(ReplyService.deleteReplyRequest(id));\n\t}\n\n\t$scope.reportReplyAsSpam = function(id)\n\t{\n\t\tconsole.log(\"reportReplyAsSpam(\" + id + \")\");\n\t\tnetworkService.send(ReplyService.flagReplyRequest(id));\n\t}\n\n  $scope.deleteComment = function(id)\n  {\n    console.log(\"deleteComment(\" + id + \")\");\n    // $scope.innerButtonTapped = true;\n    networkService.send(CommentService.deleteCommentRequest(id));\n    if (HTML5_LOC){\n      $location.path(\"/topic/\" + $scope.topicId);\n    } else {\n      $window.location = \"#/topic/\" + $scope.topicId;\n    }\n    $window.location.reload();\n  }\n\n  $scope.reportCommentAsSpam = function(id)\n  {\n    console.log(\"reportCommentAsSpam(\" + id + \")\");\n    // $scope.innerButtonTapped = true;\n    networkService.send(CommentService.flagCommentRequest(id)); \n  }\n\n\t$scope.imageClick = function(imageURL)\n\t{\n\t\tevent.cancelBubble = true;\n\t   if(event.stopPropagation) event.stopPropagation();\n\n\t\t$.magnificPopup.open({\n                    items: {\n                    \ttype:'image',\n                    \tsrc: imageURL,\n                },\n                type: 'inline',\n                callbacks:\n                {\n\t\t\t\t    open: function()\n\t\t\t\t    {\n\t\t\t\t      console.log(\"popup opened\");\n\t\t\t\t      $('body').bind('touchmove', function(e){e.preventDefault()})\n\t\t\t\t    },\n\t\t\t\t    close: function()\n\t\t\t\t    {\n\t\t\t\t      console.log(\"popup closed\");\n\t\t\t\t      $('body').unbind('touchmove')\n\t\t\t\t    }\n\t\t\t\t    // e.t.c.\n\t\t\t\t}\n            });\n\t}\n\n\tfunction updateScore(){\n\t\t//Score update here\n\t\t$scope.leftTeam = TopicService.getTeamA();\n\t\t$scope.rightTeam = TopicService.getTeamB();\n\t\tvar score = TopicService.getScore();\n\t\tif(score != undefined){\n\t\t\t$scope.leftTeamScore = score.points[0];\n\t\t\t$scope.rightTeamScore = score.points[1];\n\t\t}\n\t\t$scope.gameStatus = TopicService.getGameStatus();\n\t\t$scope.topicTitle = TopicService.getTitle();\n\t\tif($scope.gameStatus == \"live\") {\n\t\t\t$scope.gamePeriod = TopicService.getGamePeriod();\n\t\t\t$scope.gameClock = TopicService.getGameClock();\n\t\t}\n\t\tconsole.log(\"Scores updated in replies\");\n\t}\n\n\t function updateCommentInReply(selectedComment){\n\t\tconsole.log(\"Already Had PostID: \", $scope.postID);\n    if (!$scope.postID){\n      $scope.postID = ReplyService.getPostId();\n      console.log(\"Regenerated PostID: \", $scope.postID);\n    }\n    if(selectedComment == undefined){\n\t\t\tselectedComment = CommentService.getCommentById($scope.postID);\n\t\t}\n\t\tif(selectedComment != undefined){\n\t\t\tif(NETWORK_DEBUG) console.log(\"Updated comment in reply triggered\" ); \n\t\t\tvar tempComment = {};\n\t\t\ttempComment = selectedComment;\n\t\t\ttempComment.postAuthorName = selectedComment.author.name;\n\t\t\ttempComment.postAuthorPhoto = selectedComment.author.photo;\n\n\t\t\ttempComment.postTimestamp = selectedComment.createdAt;\n\t\t\ttempComment.likeCount = selectedComment.metrics.likes;\n\t\t\ttempComment.replyCount = selectedComment.metrics.replies;\n\t\t\ttempComment.mediaAspectFeed = selectedComment.mediaAspectFeed;\n\t\t\ttempComment.isLiked = selectedComment.signal.like;\n\t\t\ttempComment.topicId = selectedComment.topicId;\n      tempComment.isMyComment = UserInfoService.isCurrentUser(selectedComment.author.id);\n\n      if (tempComment.type === 'media'){\n          tempComment.mediaUrl = selectedComment.mediaUrl;\n          // tempComment.trustedMediaUrl = $scope.trustSrc(tempComment.mediaUrl);\n          tempComment.mediaAspectFeed = selectedComment.mediaAspectFeed;\n          tempComment.mediaAspectFull = selectedComment.mediaAspectFull;\n          tempComment.mediaAspectRatio = selectedComment.mediaAspectRatio;\n          tempComment.mediaOrientation = selectedComment.mediaOrientation;\n          tempComment.mediaThumbUrl = selectedComment.mediaThumbUrl;\n        }\n\n      if (tempComment.type === 'embed'){\n        tempComment.shared = true;\n        tempComment.embed = selectedComment.embed;\n        tempComment.embed.embedCreatedAt = selectedComment.embedCreatedAt;\n        tempComment.embed.embedCreatedAtFull = selectedComment.embedCreatedAtFull;\n\n        if (tempComment.embedType === 'media'){\n          tempComment.mediaUrl = selectedComment.embedMedia.mediaUrl;\n          tempComment.mediaThumbUrl = selectedComment.embedMedia.mediaThumbUrl;\n          tempComment.mediaAspectFeed = selectedComment.embedMedia.mediaAspectFeed;\n          tempComment.mediaAspectFull = selectedComment.embedMedia.mediaAspectFull;\n          tempComment.mediaAspectRatio = selectedComment.embedMedia.mediaAspectRatio;\n          tempComment.mediaOrientation = selectedComment.embedMedia.mediaOrientation;\n        }\n\n        if (tempComment.providerName === \"Twitter\"){\n          tempComment.embed.embedLogo = \"img/twitterLogo@2x.png\";\n        } else {\n          tempComment.embed.embedLogo = selectedComment.embed.provider.logo;\n        }\n\n        if (selectedComment.embed.type === 'link' && selectedComment.embed.playable === true){\n          tempComment.embedHtml = selectedComment.embedHtml;\n        }\n      }\n\n\t\t\t$scope.comment = tempComment;\n\t\t}\n    // console.log(\"DIRECT COMMENT? \", TopicService.directComment);\n    // if(TopicService.directComment === true){\n    //   setTimeout(function(){$scope.triggerRepliesKeyboard();},1000);\n    //   TopicService.directComment = false;\n    // }\n    $(document).ready(function(){\n      checkDirectReply();\n    });\n\t}\n\n\tfunction updateReplies(){\n\t\t//TODO: check with ahmed, these values could be individual scope var.\n\t\tvar repliesData = ReplyService.replies();\n\t\tvar len = repliesData.length;\n\n\t\t$scope.replies = [];\n\n\t\tfor(i=0;i<len;i++){\n\t\t\tvar tempReply = {};\n\t\t\ttempReply = repliesData[i];\n\t\t\ttempReply.postAuthorName = repliesData[i].author.name;\n\t\t\ttempReply.postAuthorPhoto = repliesData[i].author.photo;\n\t\t\ttempReply.isMyReply = UserInfoService.isCurrentUser(repliesData[i].author.id);\n\n\t\t\ttempReply.postTimestamp = repliesData[i].createdAt;\n\t\t\ttempReply.likeCount = repliesData[i].metrics.likes;\n\t\t\ttempReply.replyCount = repliesData[i].metrics.replies;\n\t\t\ttempReply.mediaAspectFeed = repliesData[i].mediaAspectFeed;\n\t\t\ttempReply.isLiked = repliesData[i].signal.like;\n\t\t\t\n      if (tempReply.type === 'media'){\n          tempReply.mediaUrl = repliesData[i].mediaUrl;\n          // tempReply.trustedMediaUrl = $scope.trustSrc(tempReply.mediaUrl);\n          tempReply.mediaAspectFeed = repliesData[i].mediaAspectFeed;\n          tempReply.mediaAspectFull = repliesData[i].mediaAspectFull;\n          tempReply.mediaAspectRatio = repliesData[i].mediaAspectRatio;\n          tempReply.mediaOrientation = repliesData[i].mediaOrientation;\n          tempReply.mediaThumbUrl = repliesData[i].mediaThumbUrl;\n        }\n      if (tempReply.type === 'embed'){\n        tempReply.shared = true;\n        tempReply.embed = repliesData[i].embed;\n        tempReply.embed.embedCreatedAt = repliesData[i].embedCreatedAt;\n        tempReply.embed.embedCreatedAtFull = repliesData[i].embedCreatedAtFull;\n\n        if (tempReply.providerName === \"Twitter\"){\n          tempReply.embed.embedLogo = \"img/twitterLogo@2x.png\";\n        } else {\n          tempReply.embed.embedLogo = repliesData[i].embed.provider.logo;\n        }\n\n        if (repliesData[i].embed.type === 'link' && repliesData[i].embed.playable === true){\n          tempReply.embed.embedHtml = $sce.trustAsHtml(repliesData[i].embedHtml);\n        }\n      }\n\n      $scope.replies.push(tempReply);\n\n\t\t\t// console.log(i +\" : updated replies html : \" +$scope.replies[i].html);\n\t\t\t// console.log(i +\" : updated replies author name: \" +$scope.replies[i].postAuthorName);\n\t\t\t// console.log(i +\" : updated replies author photo: \" +$scope.replies[i].postAuthorPhoto);\n\n\t\t\tif($scope.replies[i].type == \"media\"){\n\t\t\t\t// console.log(i +\" : updated replies media : \" +$scope.replies[i].mediaUrl);\n\t\t\t\t// console.log(i +\" : updated replies media : \" +$scope.replies[i].mediaAspectFeed);\n\t\t\t}\n\t\t\t//console.log(i +\" : updated replies likecount : \" +$scope.replies[i].likeCount);\n\n\t\t}\n  //   console.log(\"DIRECT COMMENT? \", TopicService.directComment);\n\t\t// if(TopicService.directComment === true)\n\t\t// {\n\t\t// \t$scope.triggerRepliesKeyboard();\n\t\t// \tTopicService.directComment = false;\n\t\t// }\n\n\t\tif($scope.justReplied == true)\n\t\t{\n\t\t\tsetTimeout(function()\n\t\t\t\t{ \n\t\t\t\t\tconsole.log(\"Scroll to last reply\");\n\t\t\t\t\twindow.scrollTo(0,document.body.scrollHeight);\n\t\t\t\t\t$scope.justReplied = false;\n\t\t\t\t}, 1000);\n\t\t}\n\t}\n\t \n\t var notifyNewReplies = function(){\n\n\t\t if($scope.replies == undefined)\n\t\t {\n\t\t\t updateReplies();\n\t\t }\n\t\t else {\n\t\t\t var repliesData = ReplyService.replies();\n\t\t\t var len = repliesData.length;\n\t\t\t if($scope.replies.length < len ){\n\t\t\t\t //console.log(\"newReplies triggered\");\n\t\t\t\t if(!UserInfoService.isCurrentUser(repliesData[len-1].author.id)){\n\t\t\t\t\t $scope.showNewRepliesIndicator = true;\n\t\t\t\t }\n\t\t\t\t else{\n\t\t\t\t\t updateReplies();\n\t\t\t\t }\n\t\t\t }\n\t\t\t else{\n\t\t\t\t updateReplies();\n\t\t\t }\n\n\t\t }\n\t }\n\t \n\tReplyService.registerObserverCallback(notifyNewReplies);\n\tTopicService.registerObserverCallback(updateScore);\n\tCommentService.registerObserverCallback(updateCommentInReply);\n\n\t$scope.trustSrc = function(src)\n\t{\n    \treturn $sce.trustAsResourceUrl(src);\n  \t}\n\n  $window.addEventListener(\"beforeunload\", function(){\n    console.log(\"Before Unload\");\n    ForumStorage.setToLocalStorage(\"hasUserVisited\", true);\n  });\n\n  $scope.xLinkActivated = false;\n\n\n}]);\n\n","angular.module(\"SmartStadiumModule\", [])\n.controller(\"SmartStadiumController\", [\"$scope\", function ($scope){\n  \n  var _this = this;\n  this.viewScreen = false;\n  this.ssActiveScreen;\n\n  this.viewHighlights = function() {\n    _this.ssActiveScreen = 'highlights';\n    _this.viewScreen = true;\n  };\n\n  this.viewRoster = function() {\n    _this.ssActiveScreen = 'roster';\n    _this.viewScreen = true;\n  };\n\n  this.viewStats = function() {\n    _this.ssActiveScreen = 'stats';\n    _this.viewScreen = true;\n  };\n\n  this.viewProfileStats = function() {\n    _this.ssActiveScreen = 'profileStats';\n    _this.viewScreen = true;\n  };\n\n  this.exitView = function() {\n    _this.viewScreen = false;\n  };\n\n}]);","angular.module('SocialModule')\n.directive('shareToChatDialog', function () {\n  return {\n    restrict: 'E',\n    scope: {\n      thisPost: '=',\n      trustSource: '&',\n      shareSubmit: '&',\n      exitShare: '&',\n      highlight: '&',\n      unhighlight: '&'\n    },\n    templateUrl: 'partials/sharePreview.html'\n  };\n});","angular.module('NetworkModule')\n.factory('ReplyService', [\"DateUtilityService\",\"Bant\",\"FDSUtility\", \n\tfunction (DateUtilityService,Bant,FDSUtility) {\n\tvar _postID;\n\tvar LIST_REPLIES_URI = \"/v1.0/comment/replies/list/\"\n\tvar POST_REPLY_URI=\"/v1.0/reply/create\";\n\t\n\tvar UPDATE_REPLY_URI = \"/v1.0/reply/content/update/\";\n\tvar DELETE_REPLY_URI = \"/v1.0/reply/delete/\";\n\t\t\n\tvar LIKE_REPLY_URI = \"/v1.0/reply/like/\";\n\tvar UNLIKE_REPLY_URI = \"/v1.0/reply/unlike/\";\n\t\n\tvar HIDE_REPLY_URI = \"/v1.0/reply/hide/\";\n\tvar UNHIDE_REPLY_URI = \"/v1.0/reply/unhide/\";\n\t\n\tvar FLAG_REPLY_URI = \"/v1.0/reply/flag/\";\n\tvar UNFLAG_REPLY_URI = \"/v1.0/reply/unflag/\";\n\t\n\tvar observerCallbacks = [];\n\tvar _replies = [];\n\tvar _topicIdFromReply;\n\tvar _currentCommentId;\n\n\tfunction setReplies(replyData) {\n\t\t_replies = [];\n\t\ttempReplyData = replyData.data.results;\n\t\tif(tempReplyData!= undefined && tempReplyData.length>0){\n\t\t\tvar len = tempReplyData.length;\n\t\t\t// console.log(\"replies #\"+ len);\n\t\t\tfor(i=0;i<len;i++){\n\t\t\t\tvar _replyObject = {};\n\t\t\t\t_replyObject = Bant.bant(tempReplyData[i])\n\t\t\t\tif(_replyObject.id != undefined )\n\t\t\t\t\t_replies.push(_replyObject);\n\t\t\t\t// console.log(\"Reply object\"+_replyObject);\n\t\t\t\t_topicIdFromReply = tempReplyData[i].topicId;;\n\t\t\t}\n\t\t\tnotifyObservers();\n\t\t}\n\t}\n\n\tfunction appendToReplies(postReplyData) {\n\t\tvar tempPostedReply = postReplyData.data;\n\t\tif(tempPostedReply!= undefined){\n\t\t\tconsole.log(\"appendToReplies :\"+tempPostedReply);\n\t\t\tconsole.log(\"Reply comment ID :\"+ tempPostedReply.commentId);\n\t\t\tconsole.log(\"Current comment ID :\"+ _currentCommentId);\n\t\t\tif(tempPostedReply.commentId == _currentCommentId){\n\t\t\tvar _replyObject = Bant.bant(tempPostedReply);\n\t\t\tif(_replyObject.id != undefined )\n\t\t\t\t_replies.push(_replyObject);\n\t\t\tnotifyObservers();\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction updateReply(replyData){\n\t\t//if Replys ID exist, update it \n\t\t//else append to existing list\n\t\tvar replyObj = replyData.data;\n\t\tfor(i=0;i<_replies.length;i++){\n\t\t\tif(_replies[i].id == replyObj.id){\n\t\t\t\t//update\n\t\t\t\t_replies[i] = Bant.bant(replyObj)\n\t\t\t\tconsole.log(\"Reply updated\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tappendToReplies(replyData);\n\t\t// console.log(\"ReplyService update Reply\");\n\t\treturn 0;\n\t}\n\t\n\tfunction updateLocalData(newData){\n\t\tfor(i=0;i<_replies.length;i++){\n\t\t\tif(_replies[i].id == newData.id){\n\t\t\t\t//update\n\t\t\t\t_replies[i] = newData;\n\t\t\t\tif(NETWORK_DEBUG)\n\t\t\t\t\tconsole.log(\"updated Data for id:\"+ _replies[i].id);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction updateLikeReplyWithId(id, liked){\n\t\tif(NETWORK_DEBUG)\n\t\tconsole.log(\"updateLikeReplyWithId :\"+ id + \"   liked \"+ liked);\n\t\tif((id != undefined)){\n\t\t\tvar tempObject;\n\t\t\ttempObject = getReplyById(id);\n\t\t\ttempObject = Bant.updateBantLiked(tempObject, liked);\n\t\t\tupdateLocalData(tempObject);\n\n\t\t\tnotifyObservers();\n\t\t}\n\t\t\n\t}\n\n\tfunction removeReply(replyData){\n\t\tfor(i=0;i<_replies.length;i++){\n\t\t\tif(_replies[i].id == replyData.id){\n\t\t\t\t//remove element\n\t\t\t\t_replies.splice(i,1);\n\t\t\t}\n\t\t}\n\n\t}\n\t\n\tfunction getReplyById(id){\n\t\tif(NETWORK_DEBUG) console.log(\"_replies :\"+ _replies.length);\n\t\tfor(i=0;i<_replies.length;i++){\n\t\t\tif(_replies[i].id == id){\n\t\t\t\t//remove element\n\t\t\t\treturn _replies[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction getCommentIdByReply(id){\n\t\tif(NETWORK_DEBUG) console.log(\"_replies :\"+ _replies.length);\n\t\tfor(i=0;i<_replies.length;i++){\n\t\t\tif(_replies[i].id == id){\n\t\t\t\t//remove element\n\t\t\t\treturn _replies[i].commentId;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction replyGetRequest(uri){\n\t\treturn  varReplyParams = {\"rid\": \"reply\",\n\t\t\t\t\"timestamp\": new Date().getTime(),\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"uri\": encodeURI(uri)};\n\t\t\n\t}\n\t\n\tfunction replyPostRequest(uri){\n\t\treturn varPostParams = {\n\t\t\t\t\"rid\": \"reply\",\n\t\t\t\t\"timestamp\": new Date().getTime(),\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"uri\": encodeURI(uri)}\n\t\t\n\t}\n\t\n\tfunction getRepliesRequest(commentId){\n\t\t_currentCommentId = commentId;\n\t\tvar uri = LIST_REPLIES_URI + commentId;\n\t\treturn replyGetRequest (uri);\n\t\t\n\t}\n\n\tfunction getPostReplyRequest(topicId, commentId,replyData, replyId, isReplyToReply){\n\t\tvar targetType = \"comment\";\n\t\tvar targetId = commentId;\n\t\tif(isReplyToReply != undefined && isReplyToReply == true ){\n\t\t\ttargetType = \"reply\";\n\t\t\ttargetId = replyId;\n\t\t}\n\t\tconsole.log(\"Topicid : \"+topicId,\"commentid : \"+commentId,\"replydata : \"+replyData);\n\t\tvar createReplyParams = replyPostRequest(POST_REPLY_URI);\n\t\tcreateReplyParams.data = \t\n\t\t{\n\t\t\t\t\"lang\": \"en\", \n\t\t\t\t\"content\": {\"sections\":[{\"type\":\"html\",\"html\":replyData}]},\n\t\t\t\t\"target\": {\n\t\t\t\t\t\"type\": targetType, // Target type: “comment” or “reply”.\n\t\t\t\t\t\"id\":targetId,  // Target bant ID of comment or reply.\n\t\t\t\t},\n\n\t\t\t\t\"topicId\": topicId,\n\t\t\t\t\"commentId\": commentId\n\t\t};\n\t\treturn createReplyParams;\n\t}\n\n\tfunction likeReplyRequest(id){\n\t\treturn  replyPostRequest(LIKE_REPLY_URI + id);\n\t}\n\n\tfunction unlikeReplyRequest(id){\n\t\treturn  replyPostRequest(UNLIKE_REPLY_URI + id);\n\t}\n\t\n\t\n\tfunction hideReplyRequest(id){\n\t\treturn  replyPostRequest(HIDE_REPLY_URI + id);\n\t}\n\n\tfunction unhideReplyRequest(id){\n\t\treturn  replyPostRequest(UNHIDE_REPLY_URI + id);\n\t}\n\t\n\tfunction flagReplyRequest(id){\n\t\treturn  replyPostRequest(FLAG_REPLY_URI + id +\"?reason=spam\");\n\t}\n\n\tfunction unflagReplyRequest(id){\n\t\treturn  replyPostRequest(UNFLAG_REPLY_URI + id);\n\t}\n\t\n\tfunction deleteReplyRequest(id){\n\t\treturn  replyPostRequest(DELETE_REPLY_URI + id);\n\t}\n\t\n\t//call this when you know '_replies' has been changed\n\tvar notifyObservers = function(){\n\t\tangular.forEach(observerCallbacks, function(callback){\n\t\t\tcallback();\n\t\t});\n\t};\n\t\n\tfunction registerObserverCallback(callback){\n\t\t//register an observer\n\t\t// console.log(\"reply callback registered\");\n\t\tvar callbackLength  = observerCallbacks.length;\n\t\twhile(callbackLength > 0){\n\t\t\tcallbackLength = observerCallbacks.length;\n\t\t\tobserverCallbacks.pop();\n\t\t}\n\t\tobserverCallbacks.push(callback);\n\t}\n\tfunction isReplyLiked(id){\n\t\treturn FDSUtility.isLikedById(_replies, id);\n\t}\n\t\n\tfunction updateReplyLocalData(uri,id){\n\t\tif(uri == LIKE_REPLY_URI+id){\n\t\t\tconsole.log(\"calling update like \");\n\t\t\tupdateLikeReplyWithId(id, true)\n\t\t}\n\t\telse if(uri == UNLIKE_REPLY_URI+id){\n\t\t\tupdateLikeReplyWithId(id, false)\n\t\t}\n\t\telse if(uri == DELETE_REPLY_URI+id){\n\t\t\t_replies = FDSUtility.deleteById(_replies,id);\n\t\t\tnotifyObservers();\n\t\t\treturn 0;\n\t\t}\n\t\telse if(uri == FLAG_REPLY_URI+id){\n\t\t\t_replies = FDSUtility.flagById(_replies, true);\n\t\t\t}\n\t\telse if(uri == UNFLAG_REPLY_URI+id){\n\t\t\t_replies = FDSUtility.flagById(_replies, false);\n\t\t}\n\t\telse if(uri == HIDE_REPLY_URI+id){\n\t\t\t_replies = FDSUtility.hideById(_replies, true);\n\t\t}\n\t\telse if(uri == UNHIDE_REPLY_URI+id){\n\t\t\t_replies = FDSUtility.hideById(_replies, false);\n\t\t}\n\t}\n\n\t\n\treturn {\n\t\treplies: function(){return _replies },\n\t\tgetTopicIdFromReply: function(){return _topicIdFromReply; },\n\t\tgetPostId: function(){return _postID ;},\n\t\tsetPostId: function(postId){_postID = postId ;},\n\t\tsetReplies:setReplies,\n\t\tupdateReply:updateReply,\n\t\tappendToReplies:appendToReplies,\n\t\tupdateLikeReplyWithId:updateLikeReplyWithId,\n\t\tupdateReplyLocalData:updateReplyLocalData,\n\t\tremoveReply:removeReply,\n\t\tgetPostReplyRequest:getPostReplyRequest,\n\t\tlikeReplyRequest:likeReplyRequest,\n\t\tunlikeReplyRequest:unlikeReplyRequest,\n\t\tdeleteReplyRequest:deleteReplyRequest,\n\t\tflagReplyRequest:flagReplyRequest,\n\t\tregisterObserverCallback:registerObserverCallback,\n\t\tgetRepliesRequest:getRepliesRequest,\n\t\tisReplyLiked:isReplyLiked,\n\t\tgetCommentIdByReply:getCommentIdByReply\n\t};\n\n}]);","angular.module('SocialModule')\n.factory('SocialService', [\"Bant\", \n  function (Bant) {\n  var LIST_SOCIAL_URI = \"/v1.0/channel/social/list/\";\n\n\n  var observerCallbacks = [];\n  var _socialArray = [];\n  var _offset = 0;\n  var LIMIT = 20;\n\n\n  function setSocialData(socialData) {\n    _socialArray = [];\n    var tempData = socialData.data.results;\n    var len = tempData.length;\n\n    if (!!tempData && len > 0){\n      for (i = 0; i < len; i++){\n        var _socialObject = Bant.bant(tempData[i]);\n        if (!!_socialObject.id)\n          _socialArray.push(_socialObject);\n      }\n      _offset = socialData.data.nextOffset;\n      notifyObservers();\n    }\n  };\n\n  var notifyObservers = function(){\n    angular.forEach(observerCallbacks, function(callback){\n      callback();\n    });\n  };\n\n  function registerObserverCallback(callback){\n    // register an observer for provided feed\n    var callbackLength  = observerCallbacks.length;\n    while(callbackLength > 0){\n      callbackLength = observerCallbacks.length;\n      observerCallbacks.pop();\n    }\n    observerCallbacks.push(callback);\n  };\n\n  function getSocialDataRequest(id, offset){\n    var reqOffset = offset || _offset;\n    var request = {\n      \"rid\": \"social\",\n      \"timestamp\": new Date().getTime(),\n      \"method\": \"GET\",\n      \"uri\": encodeURI(LIST_SOCIAL_URI+id+\"?limit=\"+LIMIT+\"&offset=\"+reqOffset)\n    };\n    console.log(\"Social Request: \", request);\n    return request;\n  };\n\n  return {\n    socialArray: function(){\n      return _socialArray;\n    },\n    resetSocialOffset: function(){\n      _offset = 0;\n    },\n    setSocialData: setSocialData,\n    getSocialDataRequest: getSocialDataRequest,\n    registerObserverCallback: registerObserverCallback\n  };\n\n}]);"],"sourceRoot":"/source/"}