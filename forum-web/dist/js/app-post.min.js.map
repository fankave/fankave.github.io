{"version":3,"sources":["PostController.js","SmartStadiumController.js","SocialDirectives.js","ReplyService.js","SocialService.js"],"names":["angular","module","controller","$scope","$sce","$timeout","$window","$location","$sanitize","$routeParams","networkService","ReplyService","TopicService","CommentService","UserInfoService","URIHelper","SplashService","MUService","FileUploader","ForumStorage","UserAgentService","updateScore","leftTeam","getTeamA","rightTeam","getTeamB","score","getScore","undefined","leftTeamScore","points","rightTeamScore","gameStatus","getGameStatus","topicTitle","getTitle","gamePeriod","getGamePeriod","gameClock","getGameClock","updateCommentInReply","selectedComment","GEN_DEBUG","console","log","postID","getPostId","getCommentById","NETWORK_DEBUG","tempComment","postAuthorName","author","name","postAuthorPhoto","photo","postTimestamp","createdAt","likeCount","metrics","likes","replyCount","replies","mediaAspectFeed","isLiked","signal","like","topicId","isMyComment","isCurrentUser","id","type","mediaUrl","mediaAspectFull","mediaAspectRatio","mediaOrientation","mediaThumbUrl","shared","embed","embedCreatedAt","embedCreatedAtFull","embedType","embedMedia","providerName","embedLogo","provider","logo","playable","embedHtml","comment","updateReplies","repliesData","len","length","i","tempReply","isMyReply","trustAsHtml","push","justReplied","setTimeout","window","scrollTo","document","body","scrollHeight","isMobileUser","mobileBrowser","mobileUserAgent","getMobileUserAgent","getFromLocalStorage","initPage","pageClass","getTopicId","setPostId","backToTopicButtonTapped","HTML5_LOC","path","location","setPeelUI","userType","$","css","isPeelUser","hidePeelSplash","isSmartStadiumUser","isMI16User","requestReplies","send","getRepliesRequest","getCommentByIdRequest","peelClose","peelWatchOnTV","ga","showId","getPeelShowId","showNewRepliesIndicator","newRepliesIndicatorTapped","checkDirectReply","directComment","focus","triggerRepliesKeyboard","secureLink","url","isGuestUser","initReplyPage","paddingTop","height","getElementById","style","paddingBottom","$watch","newValue","oldValue","replyDivs","getElementsByClassName","div","thisReply","thisDiv","onclick","e","target","is","setToLocalStorage","this","each","magnificPopup","isUserLoggedIn","isSocketConnected","init","updateLikeComment","isCommentLiked","getUnlikeCommentRequest","getLikeCommentRequest","updateLikeReply","isReplyLiked","unlikeReplyRequest","likeReplyRequest","deleteReply","deleteReplyRequest","reportReplyAsSpam","flagReplyRequest","deleteComment","deleteCommentRequest","reload","reportCommentAsSpam","flagCommentRequest","imageClick","imageURL","event","cancelBubble","stopPropagation","open","items","src","callbacks","bind","preventDefault","close","unbind","notifyNewReplies","registerObserverCallback","trustSrc","trustAsResourceUrl","addEventListener","xLinkActivated","_this","viewScreen","ssActiveScreen","viewHighlights","viewRoster","viewStats","viewProfileStats","exitView","directive","restrict","scope","thisPost","trustSource","shareSubmit","exitShare","highlight","unhighlight","templateUrl","factory","DateUtilityService","Bant","FDSUtility","setReplies","replyData","_replies","tempReplyData","data","results","_replyObject","bant","_topicIdFromReply","notifyObservers","appendToReplies","postReplyData","tempPostedReply","commentId","_currentCommentId","updateReply","replyObj","updateLocalData","newData","updateLikeReplyWithId","liked","tempObject","getReplyById","updateBantLiked","removeReply","splice","getCommentIdByReply","replyGetRequest","uri","varReplyParams","rid","timestamp","Date","getTime","method","encodeURI","replyPostRequest","varPostParams","LIST_REPLIES_URI","getPostReplyRequest","replyId","isReplyToReply","targetType","targetId","createReplyParams","POST_REPLY_URI","lang","content","sections","html","LIKE_REPLY_URI","UNLIKE_REPLY_URI","FLAG_REPLY_URI","DELETE_REPLY_URI","callback","callbackLength","observerCallbacks","pop","isLikedById","updateReplyLocalData","deleteById","flagById","UNFLAG_REPLY_URI","HIDE_REPLY_URI","hideById","UNHIDE_REPLY_URI","_postID","forEach","getTopicIdFromReply","postId","setSocialData","socialData","_socialArray","tempData","_socialObject","isNewObject","_offset","nextOffset","getSocialDataRequest","offset","reqOffset","request","LIST_SOCIAL_URI","LIMIT","socialArray","resetSocialOffset"],"mappings":"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","file":"app-post.min.js","sourcesContent":["angular.module(\"PostModule\", [\"NetworkModule\", \"SplashModule\", \"MediaModule\", \"angularFileUpload\"])\n.controller(\"PostController\", [\"$scope\", \"$sce\", \"$timeout\", \"$window\", \"$location\",\"$sanitize\", \"$routeParams\", \"networkService\",\"ReplyService\", \"TopicService\",\"CommentService\", \"UserInfoService\",\"URIHelper\", \"SplashService\", \"MUService\", \"FileUploader\", \"ForumStorage\", \"UserAgentService\",\n\nfunction ($scope, $sce, $timeout, $window, $location, $sanitize, $routeParams, networkService, ReplyService, TopicService, CommentService, UserInfoService,URIHelper,SplashService,MUService,FileUploader,ForumStorage,UserAgentService)\n{\n\n  // Check For Mobile Browser\n  if (UserAgentService.isMobileUser()){\n    $scope.mobileBrowser = true;\n    $scope.mobileUserAgent = UserAgentService.getMobileUserAgent();\n  } else {\n    $scope.mobileBrowser = false;\n  }\n\n  // Retain & Handle State when Returning From External Links\n  if (ForumStorage.getFromLocalStorage('hasUserVisited') === true){\n    $scope.initPage();\n  }\n  var headerHeight;\n\n\t//ga('send', 'pageview', \"/comment/\"+$routeParams.postID);\n\t$scope.pageClass = 'page-post';\n\n\t$scope.postID = $routeParams.postID;\n\t$scope.topicId = TopicService.getTopicId();\n\t//$scope.replies = networkService.getRepliesForPostID();\n\t$scope.justReplied = false;\n\t\n\tReplyService.setPostId($routeParams.postID);\n\n\t$scope.backToTopicButtonTapped = function()\n\t{\n\t\tvar topicId = TopicService.getTopicId();\n\t\tif(topicId == undefined)\n\t\t\ttopicId = $scope.comment.topicId;\n    if (HTML5_LOC){\n\t\t  $location.path(\"/topic/\"+topicId);\n    } else {\n      $window.location = \"#/topic/\" + topicId;\n    }\n\t}\n\n\t$scope.setPeelUI = function(userType){\n\t\tif (userType === 'peel') {\n\t\t\t$('#postSection').css('padding-top','54px');\n\t\t} else if (userType === 'email') {\n      $('#postSection').css('padding-top','54px');\n    } else if (userType === 'MI16') {\n      // $('#postSection').css('padding-top','54px');\n\t\t} else {\n      $('#postSection').css('padding-top','0px');\n    }\n\t}\n\n  if (UserInfoService.isPeelUser()){\n    $scope.isPeelUser = true;\n    SplashService.hidePeelSplash = true;\n    $scope.setPeelUI('peel');\n  }\n  else if (UserInfoService.isSmartStadiumUser()){\n    $scope.isSmartStadiumUser = true;\n    $scope.setPeelUI('email');\n  }\n  else if (UserInfoService.isMI16User()){\n    $scope.isMI16User = true;\n  }\n\n\t$scope.requestReplies = function(){\n\t\t// console.log(\"PostController requestReplies Invoked\");\n\t\tnetworkService.send(ReplyService.getRepliesRequest($scope.postID));\n\t\tvar selectedComment = CommentService.getCommentById($scope.postID);\n\t\tif(selectedComment != undefined){\n\t\t\tupdateCommentInReply(selectedComment);\n\t\t}\n\t\telse{\n      if (NETWORK_DEBUG)\n\t\t\tconsole.log(\"No data from comment service\");\n\t\t\tnetworkService.send(CommentService.getCommentByIdRequest($scope.postID));\n\t\t}\n\t}\n\n\t$scope.peelClose = function()\n\t{\n\t\tconsole.log(\"peelClose()\");\n\t}\n\n\t$scope.peelWatchOnTV = function()\n\t{\n\t\tga('send', 'event', 'Peel', 'click', 'PeelWatchOnTV');\n    if (GEN_DEBUG)\n\t\tconsole.log(\"peelWatchOnTV()\");\n\t\tvar showId = URIHelper.getPeelShowId();\n\t\tif(showId != undefined)\n\t\t\twindow.location = \"peel://tunein/\"+showId;\n\t\telse\n\t\t\twindow.location = \"peel://home\";\n\t}\n\n\t$scope.showNewRepliesIndicator = false;\n\t$scope.newRepliesIndicatorTapped = function()\n\t{\n\t\tif (GEN_DEBUG)\n    console.log(\"newRepliesIndicatorTapped\");\n\t\t$scope.showNewRepliesIndicator = false;\n\t\tupdateReplies();\n\t\twindow.scrollTo(0,document.body.scrollHeight);\n\t}\n\n  $scope.checkDirectReply = function() {\n    if (TopicService.directComment){\n      $('#postCommentField').focus();\n      TopicService.directComment = false;\n    }\n  }\n\n\t$scope.triggerRepliesKeyboard = function() {\n    $('#postCommentField').focus();\n\t}\n\n  $scope.secureLink = function(url, id) {\n    if (UserInfoService.isGuestUser()){\n      return \"\";\n    } else {\n      return url + id;\n    }\n  };\n\t\n\t$scope.initReplyPage = function(){\n\t\t$scope.pageClass = 'page-post';\n\t\t$scope.paddingTop = \"20\";\n\t\t// $scope.pageStyle = {'padding-top': '10em'};\n\n\t\t$scope.requestReplies();\n    // $scope.loadingReply = true;\n\t\tvar replyPostHeader = $(\"#replyPost\").height();\n\t\t// console.log(\"height of repy header: \" + replyPostHeader);\n\t\tvar heightString = replyPostHeader + \"px\";\n\t\t// document.getElementById('postHeader').style.height = '3.5em';//heightString;\n\t\t// document.getElementById('postSection').style.paddingTop = '3.5em';\n\t  if ($scope.mobileBrowser === true){\n      document.getElementById('postSection').style.paddingBottom = \"42px\";\n    }\n\n\t\t$scope.$watch(\"replies\", function (newValue, oldValue)\n\t\t {\n  \t\t\t$timeout(function()\n  \t\t\t{\n  \t\t\t\t// setLinks();\n          var replyDivs = document.getElementsByClassName(\"postRow\");\n          for (div in replyDivs){\n            if (newValue != undefined){\n              var thisReply = newValue[div];\n              if (thisReply != undefined){\n                var thisDiv = replyDivs[div];\n                thisDiv.onclick = function(e) {\n                  if ($(e.target).is('a')){\n                    ForumStorage.setToLocalStorage('replyBookmark', this.id);\n                    return;\n                  }\n                }\n              }\n            }\n          }\n    \t\t\t$('.commentsContainer').each(function()\n    \t\t\t{\n      \t\t\t\t$('.image-link').magnificPopup({\n        \t\t\t\ttype:'image'\n     \t\t\t\t});\n    \t\t\t});\n  \t\t\t});\n\t\t});\n\t}\n\n\tif(UserInfoService.isUserLoggedIn()){\n\t\tif(!networkService.isSocketConnected())\n\t\t\tnetworkService.init();\n\t\t$scope.initReplyPage();\n\t}\n\telse {\n\t\tif (HTML5_LOC){\n      $location.path(\"/login\");\n    } else {\n      $window.location = \"#/login\";\n    }\n\t}\n\n\t$scope.updateLikeComment = function(id) {\n\t\t// console.log(\"PostController updateLikeComment(\" + id + \")\");\n\t\tif(CommentService.isCommentLiked(id)){\n\t\t\tnetworkService.send(CommentService.getUnlikeCommentRequest(id));\n\t\t}\n\t\telse{\n\t\t\tnetworkService.send(CommentService.getLikeCommentRequest(id));\t\n\t\t}\n\t};\n\n\t$scope.updateLikeReply = function(id) {\n\t\t// console.log(\"PostController Like Reply\");\n\t\tif(ReplyService.isReplyLiked(id)){\n\t\t\tnetworkService.send(ReplyService.unlikeReplyRequest(id));\n\t\t}\n\t\telse{\n\t\t\tnetworkService.send(ReplyService.likeReplyRequest(id));\n\t\t}\n\t};\n\n\t$scope.deleteReply = function(id)\n\t{\n\t\tif (GEN_DEBUG)\n    console.log(\"deleteReply(\" + id + \")\");\n\t\tnetworkService.send(ReplyService.deleteReplyRequest(id));\n\t}\n\n\t$scope.reportReplyAsSpam = function(id)\n\t{\n\t\tif (GEN_DEBUG)\n    console.log(\"reportReplyAsSpam(\" + id + \")\");\n\t\tnetworkService.send(ReplyService.flagReplyRequest(id));\n\t}\n\n  $scope.deleteComment = function(id)\n  {\n    if (GEN_DEBUG)\n    console.log(\"deleteComment(\" + id + \")\");\n    // $scope.innerButtonTapped = true;\n    networkService.send(CommentService.deleteCommentRequest(id));\n    if (HTML5_LOC){\n      $location.path(\"/topic/\" + $scope.topicId);\n    } else {\n      $window.location = \"#/topic/\" + $scope.topicId;\n    }\n    $window.location.reload();\n  }\n\n  $scope.reportCommentAsSpam = function(id)\n  {\n    if (GEN_DEBUG)\n    console.log(\"reportCommentAsSpam(\" + id + \")\");\n    // $scope.innerButtonTapped = true;\n    networkService.send(CommentService.flagCommentRequest(id)); \n  }\n\n\t$scope.imageClick = function(imageURL)\n\t{\n\t\tevent.cancelBubble = true;\n\t   if(event.stopPropagation) event.stopPropagation();\n\n\t\t$.magnificPopup.open({\n                    items: {\n                    \ttype:'image',\n                    \tsrc: imageURL,\n                },\n                type: 'inline',\n                callbacks:\n                {\n\t\t\t\t    open: function()\n\t\t\t\t    {\n\t\t\t\t      $('body').bind('touchmove', function(e){e.preventDefault()})\n\t\t\t\t    },\n\t\t\t\t    close: function()\n\t\t\t\t    {\n\t\t\t\t      $('body').unbind('touchmove')\n\t\t\t\t    }\n\t\t\t\t    // e.t.c.\n\t\t\t\t}\n            });\n\t}\n\n\tfunction updateScore(){\n\t\t//Score update here\n\t\t$scope.leftTeam = TopicService.getTeamA();\n\t\t$scope.rightTeam = TopicService.getTeamB();\n\t\tvar score = TopicService.getScore();\n\t\tif(score != undefined){\n\t\t\t$scope.leftTeamScore = score.points[0];\n\t\t\t$scope.rightTeamScore = score.points[1];\n\t\t}\n\t\t$scope.gameStatus = TopicService.getGameStatus();\n\t\t$scope.topicTitle = TopicService.getTitle();\n\t\tif($scope.gameStatus == \"live\") {\n\t\t\t$scope.gamePeriod = TopicService.getGamePeriod();\n\t\t\t$scope.gameClock = TopicService.getGameClock();\n\t\t}\n\t}\n\n\t function updateCommentInReply(selectedComment){\n    if (GEN_DEBUG)\n\t\tconsole.log(\"Already Had PostID: \", $scope.postID);\n    if (!$scope.postID){\n      $scope.postID = ReplyService.getPostId();\n      if (GEN_DEBUG)\n      console.log(\"Regenerated PostID: \", $scope.postID);\n    }\n    if(selectedComment == undefined){\n\t\t\tselectedComment = CommentService.getCommentById($scope.postID);\n\t\t}\n\t\tif(selectedComment != undefined){\n\t\t\tif(NETWORK_DEBUG) console.log(\"Updated comment in reply triggered\" ); \n\t\t\tvar tempComment = {};\n\t\t\ttempComment = selectedComment;\n\t\t\ttempComment.postAuthorName = selectedComment.author.name;\n\t\t\ttempComment.postAuthorPhoto = selectedComment.author.photo;\n\n\t\t\ttempComment.postTimestamp = selectedComment.createdAt;\n\t\t\ttempComment.likeCount = selectedComment.metrics.likes;\n\t\t\ttempComment.replyCount = selectedComment.metrics.replies;\n\t\t\ttempComment.mediaAspectFeed = selectedComment.mediaAspectFeed;\n\t\t\ttempComment.isLiked = selectedComment.signal.like;\n\t\t\ttempComment.topicId = selectedComment.topicId;\n      tempComment.isMyComment = UserInfoService.isCurrentUser(selectedComment.author.id);\n\n      if (tempComment.type === 'media'){\n          tempComment.mediaUrl = selectedComment.mediaUrl;\n          // tempComment.trustedMediaUrl = $scope.trustSrc(tempComment.mediaUrl);\n          tempComment.mediaAspectFeed = selectedComment.mediaAspectFeed;\n          tempComment.mediaAspectFull = selectedComment.mediaAspectFull;\n          tempComment.mediaAspectRatio = selectedComment.mediaAspectRatio;\n          tempComment.mediaOrientation = selectedComment.mediaOrientation;\n          tempComment.mediaThumbUrl = selectedComment.mediaThumbUrl;\n        }\n\n      if (tempComment.type === 'embed'){\n        tempComment.shared = true;\n        tempComment.embed = selectedComment.embed;\n        tempComment.embed.embedCreatedAt = selectedComment.embedCreatedAt;\n        tempComment.embed.embedCreatedAtFull = selectedComment.embedCreatedAtFull;\n\n        if (tempComment.embedType === 'media'){\n          tempComment.mediaUrl = selectedComment.embedMedia.mediaUrl;\n          tempComment.mediaThumbUrl = selectedComment.embedMedia.mediaThumbUrl;\n          tempComment.mediaAspectFeed = selectedComment.embedMedia.mediaAspectFeed;\n          tempComment.mediaAspectFull = selectedComment.embedMedia.mediaAspectFull;\n          tempComment.mediaAspectRatio = selectedComment.embedMedia.mediaAspectRatio;\n          tempComment.mediaOrientation = selectedComment.embedMedia.mediaOrientation;\n        }\n\n        if (tempComment.providerName === \"Twitter\"){\n          tempComment.embed.embedLogo = \"img/twitterLogo@2x.png\";\n        } else {\n          tempComment.embed.embedLogo = selectedComment.embed.provider.logo;\n        }\n\n        if (selectedComment.embed.type === 'link' && selectedComment.embed.playable === true){\n          tempComment.embedHtml = selectedComment.embedHtml;\n        }\n      }\n\n\t\t\t$scope.comment = tempComment;\n\t\t}\n\t}\n\n  // $scope.hideLoading = function(){\n  //   console.log(\"HIDING LOAD\");\n  //   $scope.loadingReply = false;\n  // };\n\n\tfunction updateReplies(){\n\t\t//TODO: check with ahmed, these values could be individual scope var.\n\t\tvar repliesData = ReplyService.replies();\n\t\tvar len = repliesData.length;\n\n\t\t$scope.replies = [];\n\n\t\tfor(i=0;i<len;i++){\n\t\t\tvar tempReply = {};\n\t\t\ttempReply = repliesData[i];\n\t\t\ttempReply.postAuthorName = repliesData[i].author.name;\n\t\t\ttempReply.postAuthorPhoto = repliesData[i].author.photo;\n\t\t\ttempReply.isMyReply = UserInfoService.isCurrentUser(repliesData[i].author.id);\n\n\t\t\ttempReply.postTimestamp = repliesData[i].createdAt;\n\t\t\ttempReply.likeCount = repliesData[i].metrics.likes;\n\t\t\ttempReply.replyCount = repliesData[i].metrics.replies;\n\t\t\ttempReply.mediaAspectFeed = repliesData[i].mediaAspectFeed;\n\t\t\ttempReply.isLiked = repliesData[i].signal.like;\n\t\t\t\n      if (tempReply.type === 'media'){\n          tempReply.mediaUrl = repliesData[i].mediaUrl;\n          // tempReply.trustedMediaUrl = $scope.trustSrc(tempReply.mediaUrl);\n          tempReply.mediaAspectFeed = repliesData[i].mediaAspectFeed;\n          tempReply.mediaAspectFull = repliesData[i].mediaAspectFull;\n          tempReply.mediaAspectRatio = repliesData[i].mediaAspectRatio;\n          tempReply.mediaOrientation = repliesData[i].mediaOrientation;\n          tempReply.mediaThumbUrl = repliesData[i].mediaThumbUrl;\n        }\n      if (tempReply.type === 'embed'){\n        tempReply.shared = true;\n        tempReply.embed = repliesData[i].embed;\n        tempReply.embed.embedCreatedAt = repliesData[i].embedCreatedAt;\n        tempReply.embed.embedCreatedAtFull = repliesData[i].embedCreatedAtFull;\n\n        if (tempReply.providerName === \"Twitter\"){\n          tempReply.embed.embedLogo = \"img/twitterLogo@2x.png\";\n        } else {\n          tempReply.embed.embedLogo = repliesData[i].embed.provider.logo;\n        }\n\n        if (repliesData[i].embed.type === 'link' && repliesData[i].embed.playable === true){\n          tempReply.embed.embedHtml = $sce.trustAsHtml(repliesData[i].embedHtml);\n        }\n      }\n\n      $scope.replies.push(tempReply);\n\n\t\t\t// console.log(i +\" : updated replies html : \" +$scope.replies[i].html);\n\t\t\t// console.log(i +\" : updated replies author name: \" +$scope.replies[i].postAuthorName);\n\t\t\t// console.log(i +\" : updated replies author photo: \" +$scope.replies[i].postAuthorPhoto);\n\n\t\t\tif($scope.replies[i].type == \"media\"){\n\t\t\t\t// console.log(i +\" : updated replies media : \" +$scope.replies[i].mediaUrl);\n\t\t\t\t// console.log(i +\" : updated replies media : \" +$scope.replies[i].mediaAspectFeed);\n\t\t\t}\n\t\t\t//console.log(i +\" : updated replies likecount : \" +$scope.replies[i].likeCount);\n\n\t\t}\n\n\t\tif($scope.justReplied == true)\n\t\t{\n\t\t\tsetTimeout(function()\n\t\t\t\t{ \n\t\t\t\t\twindow.scrollTo(0,document.body.scrollHeight);\n\t\t\t\t\t$scope.justReplied = false;\n\t\t\t\t}, 1000);\n\t\t}\n\t}\n\t \n\t var notifyNewReplies = function(){\n\n\t\t if($scope.replies == undefined)\n\t\t {\n\t\t\t updateReplies();\n\t\t }\n\t\t else {\n\t\t\t var repliesData = ReplyService.replies();\n\t\t\t var len = repliesData.length;\n\t\t\t if($scope.replies.length < len ){\n\t\t\t\t //console.log(\"newReplies triggered\");\n\t\t\t\t if(!UserInfoService.isCurrentUser(repliesData[len-1].author.id)){\n\t\t\t\t\t $scope.showNewRepliesIndicator = true;\n\t\t\t\t }\n\t\t\t\t else{\n\t\t\t\t\t updateReplies();\n\t\t\t\t }\n\t\t\t }\n\t\t\t else{\n\t\t\t\t updateReplies();\n\t\t\t }\n\n\t\t }\n\t }\n\t \n\tReplyService.registerObserverCallback(notifyNewReplies);\n\tTopicService.registerObserverCallback(updateScore);\n\tCommentService.registerObserverCallback(updateCommentInReply);\n\n\t$scope.trustSrc = function(src)\n\t{\n    \treturn $sce.trustAsResourceUrl(src);\n  \t}\n\n  $window.addEventListener(\"beforeunload\", function(){\n    ForumStorage.setToLocalStorage(\"hasUserVisited\", true);\n  });\n\n  $scope.xLinkActivated = false;\n\n\n}]);\n\n","angular.module(\"SmartStadiumModule\", [])\n.controller(\"SmartStadiumController\", [\"$scope\", function ($scope){\n  \n  var _this = this;\n  this.viewScreen = false;\n  this.ssActiveScreen;\n\n  this.viewHighlights = function() {\n    _this.ssActiveScreen = 'highlights';\n    _this.viewScreen = true;\n  };\n\n  this.viewRoster = function() {\n    _this.ssActiveScreen = 'roster';\n    _this.viewScreen = true;\n  };\n\n  this.viewStats = function() {\n    _this.ssActiveScreen = 'stats';\n    _this.viewScreen = true;\n  };\n\n  this.viewProfileStats = function() {\n    _this.ssActiveScreen = 'profileStats';\n    _this.viewScreen = true;\n  };\n\n  this.exitView = function() {\n    _this.viewScreen = false;\n  };\n\n}]);","angular.module('SocialModule')\n.directive('shareToChatDialog', function () {\n  return {\n    restrict: 'E',\n    scope: {\n      thisPost: '=',\n      trustSource: '&',\n      shareSubmit: '&',\n      exitShare: '&',\n      highlight: '&',\n      unhighlight: '&'\n    },\n    templateUrl: 'partials/sharePreview.html'\n  };\n});","angular.module('NetworkModule')\n.factory('ReplyService', [\"DateUtilityService\",\"Bant\",\"FDSUtility\", \n\tfunction (DateUtilityService,Bant,FDSUtility) {\n\tvar _postID;\n\tvar LIST_REPLIES_URI = \"/v1.0/comment/replies/list/\"\n\tvar POST_REPLY_URI=\"/v1.0/reply/create\";\n\t\n\tvar UPDATE_REPLY_URI = \"/v1.0/reply/content/update/\";\n\tvar DELETE_REPLY_URI = \"/v1.0/reply/delete/\";\n\t\t\n\tvar LIKE_REPLY_URI = \"/v1.0/reply/like/\";\n\tvar UNLIKE_REPLY_URI = \"/v1.0/reply/unlike/\";\n\t\n\tvar HIDE_REPLY_URI = \"/v1.0/reply/hide/\";\n\tvar UNHIDE_REPLY_URI = \"/v1.0/reply/unhide/\";\n\t\n\tvar FLAG_REPLY_URI = \"/v1.0/reply/flag/\";\n\tvar UNFLAG_REPLY_URI = \"/v1.0/reply/unflag/\";\n\t\n\tvar observerCallbacks = [];\n\tvar _replies = [];\n\tvar _topicIdFromReply;\n\tvar _currentCommentId;\n\n\tfunction setReplies(replyData) {\n\t\t_replies = [];\n\t\ttempReplyData = replyData.data.results;\n\t\tif(tempReplyData!= undefined && tempReplyData.length>0){\n\t\t\tvar len = tempReplyData.length;\n\t\t\t// console.log(\"replies #\"+ len);\n\t\t\tfor(i=0;i<len;i++){\n\t\t\t\tvar _replyObject = {};\n\t\t\t\t_replyObject = Bant.bant(tempReplyData[i])\n\t\t\t\tif(_replyObject.id != undefined )\n\t\t\t\t\t_replies.push(_replyObject);\n\t\t\t\t// console.log(\"Reply object\"+_replyObject);\n\t\t\t\t_topicIdFromReply = tempReplyData[i].topicId;;\n\t\t\t}\n\t\t\tnotifyObservers();\n\t\t}\n\t}\n\n\tfunction appendToReplies(postReplyData) {\n\t\tvar tempPostedReply = postReplyData.data;\n\t\tif(tempPostedReply!= undefined){\n\t\t\tif (GEN_DEBUG){\n\t\t\tconsole.log(\"appendToReplies :\"+tempPostedReply);\n\t\t\tconsole.log(\"Reply comment ID :\"+ tempPostedReply.commentId);\n\t\t\tconsole.log(\"Current comment ID :\"+ _currentCommentId);\n\t\t\t}\n\t\t\tif(tempPostedReply.commentId == _currentCommentId){\n\t\t\tvar _replyObject = Bant.bant(tempPostedReply);\n\t\t\tif(_replyObject.id != undefined )\n\t\t\t\t_replies.push(_replyObject);\n\t\t\tnotifyObservers();\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction updateReply(replyData){\n\t\t//if Replys ID exist, update it \n\t\t//else append to existing list\n\t\tvar replyObj = replyData.data;\n\t\tfor(i=0;i<_replies.length;i++){\n\t\t\tif(_replies[i].id == replyObj.id){\n\t\t\t\t//update\n\t\t\t\t_replies[i] = Bant.bant(replyObj)\n\t\t\t\tif (GEN_DEBUG)\n\t\t\t\tconsole.log(\"Reply updated\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tappendToReplies(replyData);\n\t\t// console.log(\"ReplyService update Reply\");\n\t\treturn 0;\n\t}\n\t\n\tfunction updateLocalData(newData){\n\t\tfor(i=0;i<_replies.length;i++){\n\t\t\tif(_replies[i].id == newData.id){\n\t\t\t\t//update\n\t\t\t\t_replies[i] = newData;\n\t\t\t\tif(NETWORK_DEBUG)\n\t\t\t\t\tconsole.log(\"updated Data for id:\"+ _replies[i].id);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction updateLikeReplyWithId(id, liked){\n\t\tif(NETWORK_DEBUG)\n\t\tconsole.log(\"updateLikeReplyWithId :\"+ id + \"   liked \"+ liked);\n\t\tif((id != undefined)){\n\t\t\tvar tempObject;\n\t\t\ttempObject = getReplyById(id);\n\t\t\ttempObject = Bant.updateBantLiked(tempObject, liked);\n\t\t\tupdateLocalData(tempObject);\n\n\t\t\tnotifyObservers();\n\t\t}\n\t\t\n\t}\n\n\tfunction removeReply(replyData){\n\t\tfor(i=0;i<_replies.length;i++){\n\t\t\tif(_replies[i].id == replyData.id){\n\t\t\t\t//remove element\n\t\t\t\t_replies.splice(i,1);\n\t\t\t}\n\t\t}\n\n\t}\n\t\n\tfunction getReplyById(id){\n\t\tif(NETWORK_DEBUG) console.log(\"_replies :\"+ _replies.length);\n\t\tfor(i=0;i<_replies.length;i++){\n\t\t\tif(_replies[i].id == id){\n\t\t\t\t//remove element\n\t\t\t\treturn _replies[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction getCommentIdByReply(id){\n\t\tif(NETWORK_DEBUG) console.log(\"_replies :\"+ _replies.length);\n\t\tfor(i=0;i<_replies.length;i++){\n\t\t\tif(_replies[i].id == id){\n\t\t\t\t//remove element\n\t\t\t\treturn _replies[i].commentId;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction replyGetRequest(uri){\n\t\treturn  varReplyParams = {\"rid\": \"reply\",\n\t\t\t\t\"timestamp\": new Date().getTime(),\n\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\"uri\": encodeURI(uri)};\n\t\t\n\t}\n\t\n\tfunction replyPostRequest(uri){\n\t\treturn varPostParams = {\n\t\t\t\t\"rid\": \"reply\",\n\t\t\t\t\"timestamp\": new Date().getTime(),\n\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\"uri\": encodeURI(uri)}\n\t\t\n\t}\n\t\n\tfunction getRepliesRequest(commentId){\n\t\t_currentCommentId = commentId;\n\t\tvar uri = LIST_REPLIES_URI + commentId;\n\t\treturn replyGetRequest (uri);\n\t\t\n\t}\n\n\tfunction getPostReplyRequest(topicId, commentId,replyData, replyId, isReplyToReply){\n\t\tvar targetType = \"comment\";\n\t\tvar targetId = commentId;\n\t\tif(isReplyToReply != undefined && isReplyToReply == true ){\n\t\t\ttargetType = \"reply\";\n\t\t\ttargetId = replyId;\n\t\t}\n\t\tif (NETWORK_DEBUG)\n\t\tconsole.log(\"Topicid : \"+topicId,\"commentid : \"+commentId,\"replydata : \"+replyData);\n\t\tvar createReplyParams = replyPostRequest(POST_REPLY_URI);\n\t\tcreateReplyParams.data = \t\n\t\t{\n\t\t\t\t\"lang\": \"en\", \n\t\t\t\t\"content\": {\"sections\":[{\"type\":\"html\",\"html\":replyData}]},\n\t\t\t\t\"target\": {\n\t\t\t\t\t\"type\": targetType, // Target type: “comment” or “reply”.\n\t\t\t\t\t\"id\":targetId,  // Target bant ID of comment or reply.\n\t\t\t\t},\n\n\t\t\t\t\"topicId\": topicId,\n\t\t\t\t\"commentId\": commentId\n\t\t};\n\t\treturn createReplyParams;\n\t}\n\n\tfunction likeReplyRequest(id){\n\t\treturn  replyPostRequest(LIKE_REPLY_URI + id);\n\t}\n\n\tfunction unlikeReplyRequest(id){\n\t\treturn  replyPostRequest(UNLIKE_REPLY_URI + id);\n\t}\n\t\n\t\n\tfunction hideReplyRequest(id){\n\t\treturn  replyPostRequest(HIDE_REPLY_URI + id);\n\t}\n\n\tfunction unhideReplyRequest(id){\n\t\treturn  replyPostRequest(UNHIDE_REPLY_URI + id);\n\t}\n\t\n\tfunction flagReplyRequest(id){\n\t\treturn  replyPostRequest(FLAG_REPLY_URI + id +\"?reason=spam\");\n\t}\n\n\tfunction unflagReplyRequest(id){\n\t\treturn  replyPostRequest(UNFLAG_REPLY_URI + id);\n\t}\n\t\n\tfunction deleteReplyRequest(id){\n\t\treturn  replyPostRequest(DELETE_REPLY_URI + id);\n\t}\n\t\n\t//call this when you know '_replies' has been changed\n\tvar notifyObservers = function(){\n\t\tangular.forEach(observerCallbacks, function(callback){\n\t\t\tcallback();\n\t\t});\n\t};\n\t\n\tfunction registerObserverCallback(callback){\n\t\t//register an observer\n\t\t// console.log(\"reply callback registered\");\n\t\tvar callbackLength  = observerCallbacks.length;\n\t\twhile(callbackLength > 0){\n\t\t\tcallbackLength = observerCallbacks.length;\n\t\t\tobserverCallbacks.pop();\n\t\t}\n\t\tobserverCallbacks.push(callback);\n\t}\n\tfunction isReplyLiked(id){\n\t\treturn FDSUtility.isLikedById(_replies, id);\n\t}\n\t\n\tfunction updateReplyLocalData(uri,id){\n\t\tif(uri == LIKE_REPLY_URI+id){\n\t\t\tupdateLikeReplyWithId(id, true)\n\t\t}\n\t\telse if(uri == UNLIKE_REPLY_URI+id){\n\t\t\tupdateLikeReplyWithId(id, false)\n\t\t}\n\t\telse if(uri == DELETE_REPLY_URI+id){\n\t\t\t_replies = FDSUtility.deleteById(_replies,id);\n\t\t\tnotifyObservers();\n\t\t\treturn 0;\n\t\t}\n\t\telse if(uri == FLAG_REPLY_URI+id){\n\t\t\t_replies = FDSUtility.flagById(_replies, true);\n\t\t\t}\n\t\telse if(uri == UNFLAG_REPLY_URI+id){\n\t\t\t_replies = FDSUtility.flagById(_replies, false);\n\t\t}\n\t\telse if(uri == HIDE_REPLY_URI+id){\n\t\t\t_replies = FDSUtility.hideById(_replies, true);\n\t\t}\n\t\telse if(uri == UNHIDE_REPLY_URI+id){\n\t\t\t_replies = FDSUtility.hideById(_replies, false);\n\t\t}\n\t}\n\n\t\n\treturn {\n\t\treplies: function(){return _replies },\n\t\tgetTopicIdFromReply: function(){return _topicIdFromReply; },\n\t\tgetPostId: function(){return _postID ;},\n\t\tsetPostId: function(postId){_postID = postId ;},\n\t\tsetReplies:setReplies,\n\t\tupdateReply:updateReply,\n\t\tappendToReplies:appendToReplies,\n\t\tupdateLikeReplyWithId:updateLikeReplyWithId,\n\t\tupdateReplyLocalData:updateReplyLocalData,\n\t\tremoveReply:removeReply,\n\t\tgetPostReplyRequest:getPostReplyRequest,\n\t\tlikeReplyRequest:likeReplyRequest,\n\t\tunlikeReplyRequest:unlikeReplyRequest,\n\t\tdeleteReplyRequest:deleteReplyRequest,\n\t\tflagReplyRequest:flagReplyRequest,\n\t\tregisterObserverCallback:registerObserverCallback,\n\t\tgetRepliesRequest:getRepliesRequest,\n\t\tisReplyLiked:isReplyLiked,\n\t\tgetCommentIdByReply:getCommentIdByReply\n\t};\n\n}]);","angular.module('SocialModule')\n.factory('SocialService', [\"Bant\", \n  function (Bant) {\n  var LIST_SOCIAL_URI = \"/v1.0/channel/social/list/\";\n\n\n  var observerCallbacks = [];\n  var _socialArray = [];\n  var _offset = 0;\n  var LIMIT = 20;\n\n\n  function setSocialData(socialData) {\n    _socialArray = [];\n    var tempData = socialData.data.results;\n    var len = tempData.length;\n\n    if (!!tempData && len > 0){\n      for (i = 0; i < len; i++){\n        var _socialObject = Bant.bant(tempData[i]);\n        if (!!_socialObject.id){\n          var isNewObject = true;\n          for(i=0;i<_socialArray.length;i++){\n            if(_socialArray[i].id == _socialObject.id){\n              isNewObject = false;\n              break;\n              }\n            }\n          if(isNewObject)\n            _socialArray.push(_socialObject);\n        }\n      }\n      _offset = socialData.data.nextOffset;\n      console.log(\"Social Array offset : \"+ _socialArray.length);\n      notifyObservers();\n    }\n  };\n\n  var notifyObservers = function(){\n    angular.forEach(observerCallbacks, function(callback){\n      callback();\n    });\n  };\n\n  function registerObserverCallback(callback){\n    // register an observer for provided feed\n    var callbackLength  = observerCallbacks.length;\n    for (var i = 0; i < callbackLength; i++){\n      if (observerCallbacks[i] === callback){\n        return;\n      }\n    }\n    observerCallbacks.push(callback);\n  };\n\n  function getSocialDataRequest(id, offset){\n    var reqOffset = _offset;\n    var request = {\n      \"rid\": \"social\",\n      \"timestamp\": new Date().getTime(),\n      \"method\": \"GET\",\n      \"uri\": encodeURI(LIST_SOCIAL_URI+id+\"?limit=\"+LIMIT+\"&offset=\"+reqOffset)\n    };\n    if (NETWORK_DEBUG)\n    console.log(\"Social Request: \", request);\n    return request;\n  };\n\n  return {\n    socialArray: function(){\n      return _socialArray;\n    },\n    resetSocialOffset: function(){\n      _offset = 0;\n    },\n    setSocialData: setSocialData,\n    getSocialDataRequest: getSocialDataRequest,\n    registerObserverCallback: registerObserverCallback\n  };\n\n}]);"],"sourceRoot":"/source/"}